Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    BREAK
    CONCAT
    DIVIDEASSIGN
    DOUBLECOLON
    EQUALS
    FALSE
    FUNCTION
    GOTO
    GREATER
    GREATEREQUALS
    LBRACE
    LEN
    LOCAL
    LOWER
    LOWEREQUALS
    MINUSASSIGN
    MOD
    MODASSIGN
    NEQUALS
    NIL
    NOT
    OR
    PLUSASSIGN
    POWERASSIGN
    RBRACE
    RETURN
    TIMESASSIGN
    TRUE

Grammar

Rule 0     S' -> start
Rule 1     start -> chunk
Rule 2     chunk -> block
Rule 3     block -> stat_list
Rule 4     stat_list -> stat_list stat
Rule 5     stat_list -> stat
Rule 6     stat -> SEMICOLON
Rule 7     stat -> expression
Rule 8     stat -> WHILE expression DO block END
Rule 9     stat -> REPEAT block UNTIL expression
Rule 10    stat -> IF expression THEN block elseif_blocks else_block END
Rule 11    elseif_blocks -> ELSEIF expression THEN block
Rule 12    elseif_blocks -> elseif_blocks ELSEIF expression THEN block
Rule 13    elseif_blocks -> empty
Rule 14    else_block -> ELSE block
Rule 15    else_block -> empty
Rule 16    stat -> FOR IDENTIFIER ASSIGN expression COMMA expression DO block END
Rule 17    stat -> FOR namelist IN explist DO block END
Rule 18    empty -> <empty>
Rule 19    varlist -> varlist COMMA var
Rule 20    varlist -> var
Rule 21    var -> IDENTIFIER
Rule 22    var -> prefixexp LBRACKET expression RBRACKET
Rule 23    var -> prefixexp DOT IDENTIFIER
Rule 24    namelist -> namelist COMMA IDENTIFIER
Rule 25    namelist -> IDENTIFIER
Rule 26    explist -> explist COMMA expression
Rule 27    explist -> expression
Rule 28    prefixexp -> var
Rule 29    prefixexp -> functioncall
Rule 30    prefixexp -> LPAREN expression RPAREN
Rule 31    functioncall -> prefixexp args
Rule 32    functioncall -> prefixexp COLON IDENTIFIER args
Rule 33    args -> LPAREN RPAREN
Rule 34    args -> LPAREN explist RPAREN
Rule 35    args -> STRING
Rule 36    statement -> input
Rule 37    statement -> print
Rule 38    expression -> expression PLUS term
Rule 39    expression -> expression MINUS term
Rule 40    term -> term TIMES factor
Rule 41    term -> term DIVIDE factor
Rule 42    term -> term POWER factor
Rule 43    expression -> term
Rule 44    term -> factor
Rule 45    factor -> INTEGER
Rule 46    factor -> FLOAT
Rule 47    factor -> LPAREN expression RPAREN
Rule 48    print -> PRINT LPAREN expression RPAREN
Rule 49    print -> PRINT LPAREN STRING RPAREN
Rule 50    input -> INPUT LPAREN RPAREN

Terminals, with rules where they appear

AND                  : 
ASSIGN               : 16
BREAK                : 
COLON                : 32
COMMA                : 16 19 24 26
CONCAT               : 
DIVIDE               : 41
DIVIDEASSIGN         : 
DO                   : 8 16 17
DOT                  : 23
DOUBLECOLON          : 
ELSE                 : 14
ELSEIF               : 11 12
END                  : 8 10 16 17
EQUALS               : 
FALSE                : 
FLOAT                : 46
FOR                  : 16 17
FUNCTION             : 
GOTO                 : 
GREATER              : 
GREATEREQUALS        : 
IDENTIFIER           : 16 21 23 24 25 32
IF                   : 10
IN                   : 17
INPUT                : 50
INTEGER              : 45
LBRACE               : 
LBRACKET             : 22
LEN                  : 
LOCAL                : 
LOWER                : 
LOWEREQUALS          : 
LPAREN               : 30 33 34 47 48 49 50
MINUS                : 39
MINUSASSIGN          : 
MOD                  : 
MODASSIGN            : 
NEQUALS              : 
NIL                  : 
NOT                  : 
OR                   : 
PLUS                 : 38
PLUSASSIGN           : 
POWER                : 42
POWERASSIGN          : 
PRINT                : 48 49
RBRACE               : 
RBRACKET             : 22
REPEAT               : 9
RETURN               : 
RPAREN               : 30 33 34 47 48 49 50
SEMICOLON            : 6
STRING               : 35 49
THEN                 : 10 11 12
TIMES                : 40
TIMESASSIGN          : 
TRUE                 : 
UNTIL                : 9
WHILE                : 8
error                : 

Nonterminals, with rules where they appear

args                 : 31 32
block                : 2 8 9 10 11 12 14 16 17
chunk                : 1
else_block           : 10
elseif_blocks        : 10 12
empty                : 13 15
explist              : 17 26 34
expression           : 7 8 9 10 11 12 16 16 22 26 27 30 38 39 47 48
factor               : 40 41 42 44
functioncall         : 29
input                : 36
namelist             : 17 24
prefixexp            : 22 23 31 32
print                : 37
start                : 0
stat                 : 4 5
stat_list            : 3 4
statement            : 
term                 : 38 39 40 41 42 43
var                  : 19 20 28
varlist              : 19

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . chunk
    (2) chunk -> . block
    (3) block -> . stat_list
    (4) stat_list -> . stat_list stat
    (5) stat_list -> . stat
    (6) stat -> . SEMICOLON
    (7) stat -> . expression
    (8) stat -> . WHILE expression DO block END
    (9) stat -> . REPEAT block UNTIL expression
    (10) stat -> . IF expression THEN block elseif_blocks else_block END
    (16) stat -> . FOR IDENTIFIER ASSIGN expression COMMA expression DO block END
    (17) stat -> . FOR namelist IN explist DO block END
    (38) expression -> . expression PLUS term
    (39) expression -> . expression MINUS term
    (43) expression -> . term
    (40) term -> . term TIMES factor
    (41) term -> . term DIVIDE factor
    (42) term -> . term POWER factor
    (44) term -> . factor
    (45) factor -> . INTEGER
    (46) factor -> . FLOAT
    (47) factor -> . LPAREN expression RPAREN

    SEMICOLON       shift and go to state 6
    WHILE           shift and go to state 8
    REPEAT          shift and go to state 9
    IF              shift and go to state 10
    FOR             shift and go to state 11
    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 15
    LPAREN          shift and go to state 16

    start                          shift and go to state 1
    chunk                          shift and go to state 2
    block                          shift and go to state 3
    stat_list                      shift and go to state 4
    stat                           shift and go to state 5
    expression                     shift and go to state 7
    term                           shift and go to state 12
    factor                         shift and go to state 13

state 1

    (0) S' -> start .



state 2

    (1) start -> chunk .

    $end            reduce using rule 1 (start -> chunk .)


state 3

    (2) chunk -> block .

    $end            reduce using rule 2 (chunk -> block .)


state 4

    (3) block -> stat_list .
    (4) stat_list -> stat_list . stat
    (6) stat -> . SEMICOLON
    (7) stat -> . expression
    (8) stat -> . WHILE expression DO block END
    (9) stat -> . REPEAT block UNTIL expression
    (10) stat -> . IF expression THEN block elseif_blocks else_block END
    (16) stat -> . FOR IDENTIFIER ASSIGN expression COMMA expression DO block END
    (17) stat -> . FOR namelist IN explist DO block END
    (38) expression -> . expression PLUS term
    (39) expression -> . expression MINUS term
    (43) expression -> . term
    (40) term -> . term TIMES factor
    (41) term -> . term DIVIDE factor
    (42) term -> . term POWER factor
    (44) term -> . factor
    (45) factor -> . INTEGER
    (46) factor -> . FLOAT
    (47) factor -> . LPAREN expression RPAREN

    $end            reduce using rule 3 (block -> stat_list .)
    UNTIL           reduce using rule 3 (block -> stat_list .)
    END             reduce using rule 3 (block -> stat_list .)
    ELSEIF          reduce using rule 3 (block -> stat_list .)
    ELSE            reduce using rule 3 (block -> stat_list .)
    SEMICOLON       shift and go to state 6
    WHILE           shift and go to state 8
    REPEAT          shift and go to state 9
    IF              shift and go to state 10
    FOR             shift and go to state 11
    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 15
    LPAREN          shift and go to state 16

    stat                           shift and go to state 17
    expression                     shift and go to state 7
    term                           shift and go to state 12
    factor                         shift and go to state 13

state 5

    (5) stat_list -> stat .

    SEMICOLON       reduce using rule 5 (stat_list -> stat .)
    WHILE           reduce using rule 5 (stat_list -> stat .)
    REPEAT          reduce using rule 5 (stat_list -> stat .)
    IF              reduce using rule 5 (stat_list -> stat .)
    FOR             reduce using rule 5 (stat_list -> stat .)
    INTEGER         reduce using rule 5 (stat_list -> stat .)
    FLOAT           reduce using rule 5 (stat_list -> stat .)
    LPAREN          reduce using rule 5 (stat_list -> stat .)
    $end            reduce using rule 5 (stat_list -> stat .)
    UNTIL           reduce using rule 5 (stat_list -> stat .)
    END             reduce using rule 5 (stat_list -> stat .)
    ELSEIF          reduce using rule 5 (stat_list -> stat .)
    ELSE            reduce using rule 5 (stat_list -> stat .)


state 6

    (6) stat -> SEMICOLON .

    SEMICOLON       reduce using rule 6 (stat -> SEMICOLON .)
    WHILE           reduce using rule 6 (stat -> SEMICOLON .)
    REPEAT          reduce using rule 6 (stat -> SEMICOLON .)
    IF              reduce using rule 6 (stat -> SEMICOLON .)
    FOR             reduce using rule 6 (stat -> SEMICOLON .)
    INTEGER         reduce using rule 6 (stat -> SEMICOLON .)
    FLOAT           reduce using rule 6 (stat -> SEMICOLON .)
    LPAREN          reduce using rule 6 (stat -> SEMICOLON .)
    $end            reduce using rule 6 (stat -> SEMICOLON .)
    UNTIL           reduce using rule 6 (stat -> SEMICOLON .)
    END             reduce using rule 6 (stat -> SEMICOLON .)
    ELSEIF          reduce using rule 6 (stat -> SEMICOLON .)
    ELSE            reduce using rule 6 (stat -> SEMICOLON .)


state 7

    (7) stat -> expression .
    (38) expression -> expression . PLUS term
    (39) expression -> expression . MINUS term

    SEMICOLON       reduce using rule 7 (stat -> expression .)
    WHILE           reduce using rule 7 (stat -> expression .)
    REPEAT          reduce using rule 7 (stat -> expression .)
    IF              reduce using rule 7 (stat -> expression .)
    FOR             reduce using rule 7 (stat -> expression .)
    INTEGER         reduce using rule 7 (stat -> expression .)
    FLOAT           reduce using rule 7 (stat -> expression .)
    LPAREN          reduce using rule 7 (stat -> expression .)
    $end            reduce using rule 7 (stat -> expression .)
    UNTIL           reduce using rule 7 (stat -> expression .)
    END             reduce using rule 7 (stat -> expression .)
    ELSEIF          reduce using rule 7 (stat -> expression .)
    ELSE            reduce using rule 7 (stat -> expression .)
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19


state 8

    (8) stat -> WHILE . expression DO block END
    (38) expression -> . expression PLUS term
    (39) expression -> . expression MINUS term
    (43) expression -> . term
    (40) term -> . term TIMES factor
    (41) term -> . term DIVIDE factor
    (42) term -> . term POWER factor
    (44) term -> . factor
    (45) factor -> . INTEGER
    (46) factor -> . FLOAT
    (47) factor -> . LPAREN expression RPAREN

    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 15
    LPAREN          shift and go to state 16

    expression                     shift and go to state 20
    term                           shift and go to state 12
    factor                         shift and go to state 13

state 9

    (9) stat -> REPEAT . block UNTIL expression
    (3) block -> . stat_list
    (4) stat_list -> . stat_list stat
    (5) stat_list -> . stat
    (6) stat -> . SEMICOLON
    (7) stat -> . expression
    (8) stat -> . WHILE expression DO block END
    (9) stat -> . REPEAT block UNTIL expression
    (10) stat -> . IF expression THEN block elseif_blocks else_block END
    (16) stat -> . FOR IDENTIFIER ASSIGN expression COMMA expression DO block END
    (17) stat -> . FOR namelist IN explist DO block END
    (38) expression -> . expression PLUS term
    (39) expression -> . expression MINUS term
    (43) expression -> . term
    (40) term -> . term TIMES factor
    (41) term -> . term DIVIDE factor
    (42) term -> . term POWER factor
    (44) term -> . factor
    (45) factor -> . INTEGER
    (46) factor -> . FLOAT
    (47) factor -> . LPAREN expression RPAREN

    SEMICOLON       shift and go to state 6
    WHILE           shift and go to state 8
    REPEAT          shift and go to state 9
    IF              shift and go to state 10
    FOR             shift and go to state 11
    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 15
    LPAREN          shift and go to state 16

    block                          shift and go to state 21
    expression                     shift and go to state 7
    stat_list                      shift and go to state 4
    stat                           shift and go to state 5
    term                           shift and go to state 12
    factor                         shift and go to state 13

state 10

    (10) stat -> IF . expression THEN block elseif_blocks else_block END
    (38) expression -> . expression PLUS term
    (39) expression -> . expression MINUS term
    (43) expression -> . term
    (40) term -> . term TIMES factor
    (41) term -> . term DIVIDE factor
    (42) term -> . term POWER factor
    (44) term -> . factor
    (45) factor -> . INTEGER
    (46) factor -> . FLOAT
    (47) factor -> . LPAREN expression RPAREN

    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 15
    LPAREN          shift and go to state 16

    expression                     shift and go to state 22
    term                           shift and go to state 12
    factor                         shift and go to state 13

state 11

    (16) stat -> FOR . IDENTIFIER ASSIGN expression COMMA expression DO block END
    (17) stat -> FOR . namelist IN explist DO block END
    (24) namelist -> . namelist COMMA IDENTIFIER
    (25) namelist -> . IDENTIFIER

    IDENTIFIER      shift and go to state 23

    namelist                       shift and go to state 24

state 12

    (43) expression -> term .
    (40) term -> term . TIMES factor
    (41) term -> term . DIVIDE factor
    (42) term -> term . POWER factor

    PLUS            reduce using rule 43 (expression -> term .)
    MINUS           reduce using rule 43 (expression -> term .)
    SEMICOLON       reduce using rule 43 (expression -> term .)
    WHILE           reduce using rule 43 (expression -> term .)
    REPEAT          reduce using rule 43 (expression -> term .)
    IF              reduce using rule 43 (expression -> term .)
    FOR             reduce using rule 43 (expression -> term .)
    INTEGER         reduce using rule 43 (expression -> term .)
    FLOAT           reduce using rule 43 (expression -> term .)
    LPAREN          reduce using rule 43 (expression -> term .)
    $end            reduce using rule 43 (expression -> term .)
    UNTIL           reduce using rule 43 (expression -> term .)
    END             reduce using rule 43 (expression -> term .)
    ELSEIF          reduce using rule 43 (expression -> term .)
    ELSE            reduce using rule 43 (expression -> term .)
    DO              reduce using rule 43 (expression -> term .)
    THEN            reduce using rule 43 (expression -> term .)
    RPAREN          reduce using rule 43 (expression -> term .)
    COMMA           reduce using rule 43 (expression -> term .)
    TIMES           shift and go to state 25
    DIVIDE          shift and go to state 26
    POWER           shift and go to state 27


state 13

    (44) term -> factor .

    TIMES           reduce using rule 44 (term -> factor .)
    DIVIDE          reduce using rule 44 (term -> factor .)
    POWER           reduce using rule 44 (term -> factor .)
    PLUS            reduce using rule 44 (term -> factor .)
    MINUS           reduce using rule 44 (term -> factor .)
    SEMICOLON       reduce using rule 44 (term -> factor .)
    WHILE           reduce using rule 44 (term -> factor .)
    REPEAT          reduce using rule 44 (term -> factor .)
    IF              reduce using rule 44 (term -> factor .)
    FOR             reduce using rule 44 (term -> factor .)
    INTEGER         reduce using rule 44 (term -> factor .)
    FLOAT           reduce using rule 44 (term -> factor .)
    LPAREN          reduce using rule 44 (term -> factor .)
    $end            reduce using rule 44 (term -> factor .)
    UNTIL           reduce using rule 44 (term -> factor .)
    END             reduce using rule 44 (term -> factor .)
    ELSEIF          reduce using rule 44 (term -> factor .)
    ELSE            reduce using rule 44 (term -> factor .)
    DO              reduce using rule 44 (term -> factor .)
    THEN            reduce using rule 44 (term -> factor .)
    RPAREN          reduce using rule 44 (term -> factor .)
    COMMA           reduce using rule 44 (term -> factor .)


state 14

    (45) factor -> INTEGER .

    TIMES           reduce using rule 45 (factor -> INTEGER .)
    DIVIDE          reduce using rule 45 (factor -> INTEGER .)
    POWER           reduce using rule 45 (factor -> INTEGER .)
    PLUS            reduce using rule 45 (factor -> INTEGER .)
    MINUS           reduce using rule 45 (factor -> INTEGER .)
    SEMICOLON       reduce using rule 45 (factor -> INTEGER .)
    WHILE           reduce using rule 45 (factor -> INTEGER .)
    REPEAT          reduce using rule 45 (factor -> INTEGER .)
    IF              reduce using rule 45 (factor -> INTEGER .)
    FOR             reduce using rule 45 (factor -> INTEGER .)
    INTEGER         reduce using rule 45 (factor -> INTEGER .)
    FLOAT           reduce using rule 45 (factor -> INTEGER .)
    LPAREN          reduce using rule 45 (factor -> INTEGER .)
    $end            reduce using rule 45 (factor -> INTEGER .)
    UNTIL           reduce using rule 45 (factor -> INTEGER .)
    END             reduce using rule 45 (factor -> INTEGER .)
    ELSEIF          reduce using rule 45 (factor -> INTEGER .)
    ELSE            reduce using rule 45 (factor -> INTEGER .)
    DO              reduce using rule 45 (factor -> INTEGER .)
    THEN            reduce using rule 45 (factor -> INTEGER .)
    RPAREN          reduce using rule 45 (factor -> INTEGER .)
    COMMA           reduce using rule 45 (factor -> INTEGER .)


state 15

    (46) factor -> FLOAT .

    TIMES           reduce using rule 46 (factor -> FLOAT .)
    DIVIDE          reduce using rule 46 (factor -> FLOAT .)
    POWER           reduce using rule 46 (factor -> FLOAT .)
    PLUS            reduce using rule 46 (factor -> FLOAT .)
    MINUS           reduce using rule 46 (factor -> FLOAT .)
    SEMICOLON       reduce using rule 46 (factor -> FLOAT .)
    WHILE           reduce using rule 46 (factor -> FLOAT .)
    REPEAT          reduce using rule 46 (factor -> FLOAT .)
    IF              reduce using rule 46 (factor -> FLOAT .)
    FOR             reduce using rule 46 (factor -> FLOAT .)
    INTEGER         reduce using rule 46 (factor -> FLOAT .)
    FLOAT           reduce using rule 46 (factor -> FLOAT .)
    LPAREN          reduce using rule 46 (factor -> FLOAT .)
    $end            reduce using rule 46 (factor -> FLOAT .)
    UNTIL           reduce using rule 46 (factor -> FLOAT .)
    END             reduce using rule 46 (factor -> FLOAT .)
    ELSEIF          reduce using rule 46 (factor -> FLOAT .)
    ELSE            reduce using rule 46 (factor -> FLOAT .)
    DO              reduce using rule 46 (factor -> FLOAT .)
    THEN            reduce using rule 46 (factor -> FLOAT .)
    RPAREN          reduce using rule 46 (factor -> FLOAT .)
    COMMA           reduce using rule 46 (factor -> FLOAT .)


state 16

    (47) factor -> LPAREN . expression RPAREN
    (38) expression -> . expression PLUS term
    (39) expression -> . expression MINUS term
    (43) expression -> . term
    (40) term -> . term TIMES factor
    (41) term -> . term DIVIDE factor
    (42) term -> . term POWER factor
    (44) term -> . factor
    (45) factor -> . INTEGER
    (46) factor -> . FLOAT
    (47) factor -> . LPAREN expression RPAREN

    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 15
    LPAREN          shift and go to state 16

    expression                     shift and go to state 28
    term                           shift and go to state 12
    factor                         shift and go to state 13

state 17

    (4) stat_list -> stat_list stat .

    SEMICOLON       reduce using rule 4 (stat_list -> stat_list stat .)
    WHILE           reduce using rule 4 (stat_list -> stat_list stat .)
    REPEAT          reduce using rule 4 (stat_list -> stat_list stat .)
    IF              reduce using rule 4 (stat_list -> stat_list stat .)
    FOR             reduce using rule 4 (stat_list -> stat_list stat .)
    INTEGER         reduce using rule 4 (stat_list -> stat_list stat .)
    FLOAT           reduce using rule 4 (stat_list -> stat_list stat .)
    LPAREN          reduce using rule 4 (stat_list -> stat_list stat .)
    $end            reduce using rule 4 (stat_list -> stat_list stat .)
    UNTIL           reduce using rule 4 (stat_list -> stat_list stat .)
    END             reduce using rule 4 (stat_list -> stat_list stat .)
    ELSEIF          reduce using rule 4 (stat_list -> stat_list stat .)
    ELSE            reduce using rule 4 (stat_list -> stat_list stat .)


state 18

    (38) expression -> expression PLUS . term
    (40) term -> . term TIMES factor
    (41) term -> . term DIVIDE factor
    (42) term -> . term POWER factor
    (44) term -> . factor
    (45) factor -> . INTEGER
    (46) factor -> . FLOAT
    (47) factor -> . LPAREN expression RPAREN

    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 15
    LPAREN          shift and go to state 16

    term                           shift and go to state 29
    factor                         shift and go to state 13

state 19

    (39) expression -> expression MINUS . term
    (40) term -> . term TIMES factor
    (41) term -> . term DIVIDE factor
    (42) term -> . term POWER factor
    (44) term -> . factor
    (45) factor -> . INTEGER
    (46) factor -> . FLOAT
    (47) factor -> . LPAREN expression RPAREN

    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 15
    LPAREN          shift and go to state 16

    term                           shift and go to state 30
    factor                         shift and go to state 13

state 20

    (8) stat -> WHILE expression . DO block END
    (38) expression -> expression . PLUS term
    (39) expression -> expression . MINUS term

    DO              shift and go to state 31
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19


state 21

    (9) stat -> REPEAT block . UNTIL expression

    UNTIL           shift and go to state 32


state 22

    (10) stat -> IF expression . THEN block elseif_blocks else_block END
    (38) expression -> expression . PLUS term
    (39) expression -> expression . MINUS term

    THEN            shift and go to state 33
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19


state 23

    (16) stat -> FOR IDENTIFIER . ASSIGN expression COMMA expression DO block END
    (25) namelist -> IDENTIFIER .

    ASSIGN          shift and go to state 34
    IN              reduce using rule 25 (namelist -> IDENTIFIER .)
    COMMA           reduce using rule 25 (namelist -> IDENTIFIER .)


state 24

    (17) stat -> FOR namelist . IN explist DO block END
    (24) namelist -> namelist . COMMA IDENTIFIER

    IN              shift and go to state 35
    COMMA           shift and go to state 36


state 25

    (40) term -> term TIMES . factor
    (45) factor -> . INTEGER
    (46) factor -> . FLOAT
    (47) factor -> . LPAREN expression RPAREN

    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 15
    LPAREN          shift and go to state 16

    factor                         shift and go to state 37

state 26

    (41) term -> term DIVIDE . factor
    (45) factor -> . INTEGER
    (46) factor -> . FLOAT
    (47) factor -> . LPAREN expression RPAREN

    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 15
    LPAREN          shift and go to state 16

    factor                         shift and go to state 38

state 27

    (42) term -> term POWER . factor
    (45) factor -> . INTEGER
    (46) factor -> . FLOAT
    (47) factor -> . LPAREN expression RPAREN

    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 15
    LPAREN          shift and go to state 16

    factor                         shift and go to state 39

state 28

    (47) factor -> LPAREN expression . RPAREN
    (38) expression -> expression . PLUS term
    (39) expression -> expression . MINUS term

    RPAREN          shift and go to state 40
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19


state 29

    (38) expression -> expression PLUS term .
    (40) term -> term . TIMES factor
    (41) term -> term . DIVIDE factor
    (42) term -> term . POWER factor

    PLUS            reduce using rule 38 (expression -> expression PLUS term .)
    MINUS           reduce using rule 38 (expression -> expression PLUS term .)
    SEMICOLON       reduce using rule 38 (expression -> expression PLUS term .)
    WHILE           reduce using rule 38 (expression -> expression PLUS term .)
    REPEAT          reduce using rule 38 (expression -> expression PLUS term .)
    IF              reduce using rule 38 (expression -> expression PLUS term .)
    FOR             reduce using rule 38 (expression -> expression PLUS term .)
    INTEGER         reduce using rule 38 (expression -> expression PLUS term .)
    FLOAT           reduce using rule 38 (expression -> expression PLUS term .)
    LPAREN          reduce using rule 38 (expression -> expression PLUS term .)
    $end            reduce using rule 38 (expression -> expression PLUS term .)
    UNTIL           reduce using rule 38 (expression -> expression PLUS term .)
    END             reduce using rule 38 (expression -> expression PLUS term .)
    ELSEIF          reduce using rule 38 (expression -> expression PLUS term .)
    ELSE            reduce using rule 38 (expression -> expression PLUS term .)
    DO              reduce using rule 38 (expression -> expression PLUS term .)
    THEN            reduce using rule 38 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 38 (expression -> expression PLUS term .)
    COMMA           reduce using rule 38 (expression -> expression PLUS term .)
    TIMES           shift and go to state 25
    DIVIDE          shift and go to state 26
    POWER           shift and go to state 27


state 30

    (39) expression -> expression MINUS term .
    (40) term -> term . TIMES factor
    (41) term -> term . DIVIDE factor
    (42) term -> term . POWER factor

    PLUS            reduce using rule 39 (expression -> expression MINUS term .)
    MINUS           reduce using rule 39 (expression -> expression MINUS term .)
    SEMICOLON       reduce using rule 39 (expression -> expression MINUS term .)
    WHILE           reduce using rule 39 (expression -> expression MINUS term .)
    REPEAT          reduce using rule 39 (expression -> expression MINUS term .)
    IF              reduce using rule 39 (expression -> expression MINUS term .)
    FOR             reduce using rule 39 (expression -> expression MINUS term .)
    INTEGER         reduce using rule 39 (expression -> expression MINUS term .)
    FLOAT           reduce using rule 39 (expression -> expression MINUS term .)
    LPAREN          reduce using rule 39 (expression -> expression MINUS term .)
    $end            reduce using rule 39 (expression -> expression MINUS term .)
    UNTIL           reduce using rule 39 (expression -> expression MINUS term .)
    END             reduce using rule 39 (expression -> expression MINUS term .)
    ELSEIF          reduce using rule 39 (expression -> expression MINUS term .)
    ELSE            reduce using rule 39 (expression -> expression MINUS term .)
    DO              reduce using rule 39 (expression -> expression MINUS term .)
    THEN            reduce using rule 39 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 39 (expression -> expression MINUS term .)
    COMMA           reduce using rule 39 (expression -> expression MINUS term .)
    TIMES           shift and go to state 25
    DIVIDE          shift and go to state 26
    POWER           shift and go to state 27


state 31

    (8) stat -> WHILE expression DO . block END
    (3) block -> . stat_list
    (4) stat_list -> . stat_list stat
    (5) stat_list -> . stat
    (6) stat -> . SEMICOLON
    (7) stat -> . expression
    (8) stat -> . WHILE expression DO block END
    (9) stat -> . REPEAT block UNTIL expression
    (10) stat -> . IF expression THEN block elseif_blocks else_block END
    (16) stat -> . FOR IDENTIFIER ASSIGN expression COMMA expression DO block END
    (17) stat -> . FOR namelist IN explist DO block END
    (38) expression -> . expression PLUS term
    (39) expression -> . expression MINUS term
    (43) expression -> . term
    (40) term -> . term TIMES factor
    (41) term -> . term DIVIDE factor
    (42) term -> . term POWER factor
    (44) term -> . factor
    (45) factor -> . INTEGER
    (46) factor -> . FLOAT
    (47) factor -> . LPAREN expression RPAREN

    SEMICOLON       shift and go to state 6
    WHILE           shift and go to state 8
    REPEAT          shift and go to state 9
    IF              shift and go to state 10
    FOR             shift and go to state 11
    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 15
    LPAREN          shift and go to state 16

    expression                     shift and go to state 7
    block                          shift and go to state 41
    stat_list                      shift and go to state 4
    stat                           shift and go to state 5
    term                           shift and go to state 12
    factor                         shift and go to state 13

state 32

    (9) stat -> REPEAT block UNTIL . expression
    (38) expression -> . expression PLUS term
    (39) expression -> . expression MINUS term
    (43) expression -> . term
    (40) term -> . term TIMES factor
    (41) term -> . term DIVIDE factor
    (42) term -> . term POWER factor
    (44) term -> . factor
    (45) factor -> . INTEGER
    (46) factor -> . FLOAT
    (47) factor -> . LPAREN expression RPAREN

    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 15
    LPAREN          shift and go to state 16

    expression                     shift and go to state 42
    term                           shift and go to state 12
    factor                         shift and go to state 13

state 33

    (10) stat -> IF expression THEN . block elseif_blocks else_block END
    (3) block -> . stat_list
    (4) stat_list -> . stat_list stat
    (5) stat_list -> . stat
    (6) stat -> . SEMICOLON
    (7) stat -> . expression
    (8) stat -> . WHILE expression DO block END
    (9) stat -> . REPEAT block UNTIL expression
    (10) stat -> . IF expression THEN block elseif_blocks else_block END
    (16) stat -> . FOR IDENTIFIER ASSIGN expression COMMA expression DO block END
    (17) stat -> . FOR namelist IN explist DO block END
    (38) expression -> . expression PLUS term
    (39) expression -> . expression MINUS term
    (43) expression -> . term
    (40) term -> . term TIMES factor
    (41) term -> . term DIVIDE factor
    (42) term -> . term POWER factor
    (44) term -> . factor
    (45) factor -> . INTEGER
    (46) factor -> . FLOAT
    (47) factor -> . LPAREN expression RPAREN

    SEMICOLON       shift and go to state 6
    WHILE           shift and go to state 8
    REPEAT          shift and go to state 9
    IF              shift and go to state 10
    FOR             shift and go to state 11
    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 15
    LPAREN          shift and go to state 16

    expression                     shift and go to state 7
    block                          shift and go to state 43
    stat_list                      shift and go to state 4
    stat                           shift and go to state 5
    term                           shift and go to state 12
    factor                         shift and go to state 13

state 34

    (16) stat -> FOR IDENTIFIER ASSIGN . expression COMMA expression DO block END
    (38) expression -> . expression PLUS term
    (39) expression -> . expression MINUS term
    (43) expression -> . term
    (40) term -> . term TIMES factor
    (41) term -> . term DIVIDE factor
    (42) term -> . term POWER factor
    (44) term -> . factor
    (45) factor -> . INTEGER
    (46) factor -> . FLOAT
    (47) factor -> . LPAREN expression RPAREN

    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 15
    LPAREN          shift and go to state 16

    expression                     shift and go to state 44
    term                           shift and go to state 12
    factor                         shift and go to state 13

state 35

    (17) stat -> FOR namelist IN . explist DO block END
    (26) explist -> . explist COMMA expression
    (27) explist -> . expression
    (38) expression -> . expression PLUS term
    (39) expression -> . expression MINUS term
    (43) expression -> . term
    (40) term -> . term TIMES factor
    (41) term -> . term DIVIDE factor
    (42) term -> . term POWER factor
    (44) term -> . factor
    (45) factor -> . INTEGER
    (46) factor -> . FLOAT
    (47) factor -> . LPAREN expression RPAREN

    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 15
    LPAREN          shift and go to state 16

    explist                        shift and go to state 45
    expression                     shift and go to state 46
    term                           shift and go to state 12
    factor                         shift and go to state 13

state 36

    (24) namelist -> namelist COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 47


state 37

    (40) term -> term TIMES factor .

    TIMES           reduce using rule 40 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 40 (term -> term TIMES factor .)
    POWER           reduce using rule 40 (term -> term TIMES factor .)
    PLUS            reduce using rule 40 (term -> term TIMES factor .)
    MINUS           reduce using rule 40 (term -> term TIMES factor .)
    SEMICOLON       reduce using rule 40 (term -> term TIMES factor .)
    WHILE           reduce using rule 40 (term -> term TIMES factor .)
    REPEAT          reduce using rule 40 (term -> term TIMES factor .)
    IF              reduce using rule 40 (term -> term TIMES factor .)
    FOR             reduce using rule 40 (term -> term TIMES factor .)
    INTEGER         reduce using rule 40 (term -> term TIMES factor .)
    FLOAT           reduce using rule 40 (term -> term TIMES factor .)
    LPAREN          reduce using rule 40 (term -> term TIMES factor .)
    $end            reduce using rule 40 (term -> term TIMES factor .)
    UNTIL           reduce using rule 40 (term -> term TIMES factor .)
    END             reduce using rule 40 (term -> term TIMES factor .)
    ELSEIF          reduce using rule 40 (term -> term TIMES factor .)
    ELSE            reduce using rule 40 (term -> term TIMES factor .)
    DO              reduce using rule 40 (term -> term TIMES factor .)
    THEN            reduce using rule 40 (term -> term TIMES factor .)
    RPAREN          reduce using rule 40 (term -> term TIMES factor .)
    COMMA           reduce using rule 40 (term -> term TIMES factor .)


state 38

    (41) term -> term DIVIDE factor .

    TIMES           reduce using rule 41 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 41 (term -> term DIVIDE factor .)
    POWER           reduce using rule 41 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 41 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 41 (term -> term DIVIDE factor .)
    SEMICOLON       reduce using rule 41 (term -> term DIVIDE factor .)
    WHILE           reduce using rule 41 (term -> term DIVIDE factor .)
    REPEAT          reduce using rule 41 (term -> term DIVIDE factor .)
    IF              reduce using rule 41 (term -> term DIVIDE factor .)
    FOR             reduce using rule 41 (term -> term DIVIDE factor .)
    INTEGER         reduce using rule 41 (term -> term DIVIDE factor .)
    FLOAT           reduce using rule 41 (term -> term DIVIDE factor .)
    LPAREN          reduce using rule 41 (term -> term DIVIDE factor .)
    $end            reduce using rule 41 (term -> term DIVIDE factor .)
    UNTIL           reduce using rule 41 (term -> term DIVIDE factor .)
    END             reduce using rule 41 (term -> term DIVIDE factor .)
    ELSEIF          reduce using rule 41 (term -> term DIVIDE factor .)
    ELSE            reduce using rule 41 (term -> term DIVIDE factor .)
    DO              reduce using rule 41 (term -> term DIVIDE factor .)
    THEN            reduce using rule 41 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 41 (term -> term DIVIDE factor .)
    COMMA           reduce using rule 41 (term -> term DIVIDE factor .)


state 39

    (42) term -> term POWER factor .

    TIMES           reduce using rule 42 (term -> term POWER factor .)
    DIVIDE          reduce using rule 42 (term -> term POWER factor .)
    POWER           reduce using rule 42 (term -> term POWER factor .)
    PLUS            reduce using rule 42 (term -> term POWER factor .)
    MINUS           reduce using rule 42 (term -> term POWER factor .)
    SEMICOLON       reduce using rule 42 (term -> term POWER factor .)
    WHILE           reduce using rule 42 (term -> term POWER factor .)
    REPEAT          reduce using rule 42 (term -> term POWER factor .)
    IF              reduce using rule 42 (term -> term POWER factor .)
    FOR             reduce using rule 42 (term -> term POWER factor .)
    INTEGER         reduce using rule 42 (term -> term POWER factor .)
    FLOAT           reduce using rule 42 (term -> term POWER factor .)
    LPAREN          reduce using rule 42 (term -> term POWER factor .)
    $end            reduce using rule 42 (term -> term POWER factor .)
    UNTIL           reduce using rule 42 (term -> term POWER factor .)
    END             reduce using rule 42 (term -> term POWER factor .)
    ELSEIF          reduce using rule 42 (term -> term POWER factor .)
    ELSE            reduce using rule 42 (term -> term POWER factor .)
    DO              reduce using rule 42 (term -> term POWER factor .)
    THEN            reduce using rule 42 (term -> term POWER factor .)
    RPAREN          reduce using rule 42 (term -> term POWER factor .)
    COMMA           reduce using rule 42 (term -> term POWER factor .)


state 40

    (47) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 47 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 47 (factor -> LPAREN expression RPAREN .)
    POWER           reduce using rule 47 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 47 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 47 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 47 (factor -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 47 (factor -> LPAREN expression RPAREN .)
    REPEAT          reduce using rule 47 (factor -> LPAREN expression RPAREN .)
    IF              reduce using rule 47 (factor -> LPAREN expression RPAREN .)
    FOR             reduce using rule 47 (factor -> LPAREN expression RPAREN .)
    INTEGER         reduce using rule 47 (factor -> LPAREN expression RPAREN .)
    FLOAT           reduce using rule 47 (factor -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 47 (factor -> LPAREN expression RPAREN .)
    $end            reduce using rule 47 (factor -> LPAREN expression RPAREN .)
    UNTIL           reduce using rule 47 (factor -> LPAREN expression RPAREN .)
    END             reduce using rule 47 (factor -> LPAREN expression RPAREN .)
    ELSEIF          reduce using rule 47 (factor -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 47 (factor -> LPAREN expression RPAREN .)
    DO              reduce using rule 47 (factor -> LPAREN expression RPAREN .)
    THEN            reduce using rule 47 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 47 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 47 (factor -> LPAREN expression RPAREN .)


state 41

    (8) stat -> WHILE expression DO block . END

    END             shift and go to state 48


state 42

    (9) stat -> REPEAT block UNTIL expression .
    (38) expression -> expression . PLUS term
    (39) expression -> expression . MINUS term

    SEMICOLON       reduce using rule 9 (stat -> REPEAT block UNTIL expression .)
    WHILE           reduce using rule 9 (stat -> REPEAT block UNTIL expression .)
    REPEAT          reduce using rule 9 (stat -> REPEAT block UNTIL expression .)
    IF              reduce using rule 9 (stat -> REPEAT block UNTIL expression .)
    FOR             reduce using rule 9 (stat -> REPEAT block UNTIL expression .)
    INTEGER         reduce using rule 9 (stat -> REPEAT block UNTIL expression .)
    FLOAT           reduce using rule 9 (stat -> REPEAT block UNTIL expression .)
    LPAREN          reduce using rule 9 (stat -> REPEAT block UNTIL expression .)
    $end            reduce using rule 9 (stat -> REPEAT block UNTIL expression .)
    UNTIL           reduce using rule 9 (stat -> REPEAT block UNTIL expression .)
    END             reduce using rule 9 (stat -> REPEAT block UNTIL expression .)
    ELSEIF          reduce using rule 9 (stat -> REPEAT block UNTIL expression .)
    ELSE            reduce using rule 9 (stat -> REPEAT block UNTIL expression .)
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19


state 43

    (10) stat -> IF expression THEN block . elseif_blocks else_block END
    (11) elseif_blocks -> . ELSEIF expression THEN block
    (12) elseif_blocks -> . elseif_blocks ELSEIF expression THEN block
    (13) elseif_blocks -> . empty
    (18) empty -> .

  ! shift/reduce conflict for ELSEIF resolved as shift
    ELSEIF          shift and go to state 50
    ELSE            reduce using rule 18 (empty -> .)
    END             reduce using rule 18 (empty -> .)

  ! ELSEIF          [ reduce using rule 18 (empty -> .) ]

    elseif_blocks                  shift and go to state 49
    empty                          shift and go to state 51

state 44

    (16) stat -> FOR IDENTIFIER ASSIGN expression . COMMA expression DO block END
    (38) expression -> expression . PLUS term
    (39) expression -> expression . MINUS term

    COMMA           shift and go to state 52
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19


state 45

    (17) stat -> FOR namelist IN explist . DO block END
    (26) explist -> explist . COMMA expression

    DO              shift and go to state 53
    COMMA           shift and go to state 54


state 46

    (27) explist -> expression .
    (38) expression -> expression . PLUS term
    (39) expression -> expression . MINUS term

    DO              reduce using rule 27 (explist -> expression .)
    COMMA           reduce using rule 27 (explist -> expression .)
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19


state 47

    (24) namelist -> namelist COMMA IDENTIFIER .

    IN              reduce using rule 24 (namelist -> namelist COMMA IDENTIFIER .)
    COMMA           reduce using rule 24 (namelist -> namelist COMMA IDENTIFIER .)


state 48

    (8) stat -> WHILE expression DO block END .

    SEMICOLON       reduce using rule 8 (stat -> WHILE expression DO block END .)
    WHILE           reduce using rule 8 (stat -> WHILE expression DO block END .)
    REPEAT          reduce using rule 8 (stat -> WHILE expression DO block END .)
    IF              reduce using rule 8 (stat -> WHILE expression DO block END .)
    FOR             reduce using rule 8 (stat -> WHILE expression DO block END .)
    INTEGER         reduce using rule 8 (stat -> WHILE expression DO block END .)
    FLOAT           reduce using rule 8 (stat -> WHILE expression DO block END .)
    LPAREN          reduce using rule 8 (stat -> WHILE expression DO block END .)
    $end            reduce using rule 8 (stat -> WHILE expression DO block END .)
    UNTIL           reduce using rule 8 (stat -> WHILE expression DO block END .)
    END             reduce using rule 8 (stat -> WHILE expression DO block END .)
    ELSEIF          reduce using rule 8 (stat -> WHILE expression DO block END .)
    ELSE            reduce using rule 8 (stat -> WHILE expression DO block END .)


state 49

    (10) stat -> IF expression THEN block elseif_blocks . else_block END
    (12) elseif_blocks -> elseif_blocks . ELSEIF expression THEN block
    (14) else_block -> . ELSE block
    (15) else_block -> . empty
    (18) empty -> .

    ELSEIF          shift and go to state 56
    ELSE            shift and go to state 57
    END             reduce using rule 18 (empty -> .)

    else_block                     shift and go to state 55
    empty                          shift and go to state 58

state 50

    (11) elseif_blocks -> ELSEIF . expression THEN block
    (38) expression -> . expression PLUS term
    (39) expression -> . expression MINUS term
    (43) expression -> . term
    (40) term -> . term TIMES factor
    (41) term -> . term DIVIDE factor
    (42) term -> . term POWER factor
    (44) term -> . factor
    (45) factor -> . INTEGER
    (46) factor -> . FLOAT
    (47) factor -> . LPAREN expression RPAREN

    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 15
    LPAREN          shift and go to state 16

    expression                     shift and go to state 59
    term                           shift and go to state 12
    factor                         shift and go to state 13

state 51

    (13) elseif_blocks -> empty .

    ELSEIF          reduce using rule 13 (elseif_blocks -> empty .)
    ELSE            reduce using rule 13 (elseif_blocks -> empty .)
    END             reduce using rule 13 (elseif_blocks -> empty .)


state 52

    (16) stat -> FOR IDENTIFIER ASSIGN expression COMMA . expression DO block END
    (38) expression -> . expression PLUS term
    (39) expression -> . expression MINUS term
    (43) expression -> . term
    (40) term -> . term TIMES factor
    (41) term -> . term DIVIDE factor
    (42) term -> . term POWER factor
    (44) term -> . factor
    (45) factor -> . INTEGER
    (46) factor -> . FLOAT
    (47) factor -> . LPAREN expression RPAREN

    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 15
    LPAREN          shift and go to state 16

    expression                     shift and go to state 60
    term                           shift and go to state 12
    factor                         shift and go to state 13

state 53

    (17) stat -> FOR namelist IN explist DO . block END
    (3) block -> . stat_list
    (4) stat_list -> . stat_list stat
    (5) stat_list -> . stat
    (6) stat -> . SEMICOLON
    (7) stat -> . expression
    (8) stat -> . WHILE expression DO block END
    (9) stat -> . REPEAT block UNTIL expression
    (10) stat -> . IF expression THEN block elseif_blocks else_block END
    (16) stat -> . FOR IDENTIFIER ASSIGN expression COMMA expression DO block END
    (17) stat -> . FOR namelist IN explist DO block END
    (38) expression -> . expression PLUS term
    (39) expression -> . expression MINUS term
    (43) expression -> . term
    (40) term -> . term TIMES factor
    (41) term -> . term DIVIDE factor
    (42) term -> . term POWER factor
    (44) term -> . factor
    (45) factor -> . INTEGER
    (46) factor -> . FLOAT
    (47) factor -> . LPAREN expression RPAREN

    SEMICOLON       shift and go to state 6
    WHILE           shift and go to state 8
    REPEAT          shift and go to state 9
    IF              shift and go to state 10
    FOR             shift and go to state 11
    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 15
    LPAREN          shift and go to state 16

    block                          shift and go to state 61
    stat_list                      shift and go to state 4
    stat                           shift and go to state 5
    expression                     shift and go to state 7
    term                           shift and go to state 12
    factor                         shift and go to state 13

state 54

    (26) explist -> explist COMMA . expression
    (38) expression -> . expression PLUS term
    (39) expression -> . expression MINUS term
    (43) expression -> . term
    (40) term -> . term TIMES factor
    (41) term -> . term DIVIDE factor
    (42) term -> . term POWER factor
    (44) term -> . factor
    (45) factor -> . INTEGER
    (46) factor -> . FLOAT
    (47) factor -> . LPAREN expression RPAREN

    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 15
    LPAREN          shift and go to state 16

    expression                     shift and go to state 62
    term                           shift and go to state 12
    factor                         shift and go to state 13

state 55

    (10) stat -> IF expression THEN block elseif_blocks else_block . END

    END             shift and go to state 63


state 56

    (12) elseif_blocks -> elseif_blocks ELSEIF . expression THEN block
    (38) expression -> . expression PLUS term
    (39) expression -> . expression MINUS term
    (43) expression -> . term
    (40) term -> . term TIMES factor
    (41) term -> . term DIVIDE factor
    (42) term -> . term POWER factor
    (44) term -> . factor
    (45) factor -> . INTEGER
    (46) factor -> . FLOAT
    (47) factor -> . LPAREN expression RPAREN

    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 15
    LPAREN          shift and go to state 16

    expression                     shift and go to state 64
    term                           shift and go to state 12
    factor                         shift and go to state 13

state 57

    (14) else_block -> ELSE . block
    (3) block -> . stat_list
    (4) stat_list -> . stat_list stat
    (5) stat_list -> . stat
    (6) stat -> . SEMICOLON
    (7) stat -> . expression
    (8) stat -> . WHILE expression DO block END
    (9) stat -> . REPEAT block UNTIL expression
    (10) stat -> . IF expression THEN block elseif_blocks else_block END
    (16) stat -> . FOR IDENTIFIER ASSIGN expression COMMA expression DO block END
    (17) stat -> . FOR namelist IN explist DO block END
    (38) expression -> . expression PLUS term
    (39) expression -> . expression MINUS term
    (43) expression -> . term
    (40) term -> . term TIMES factor
    (41) term -> . term DIVIDE factor
    (42) term -> . term POWER factor
    (44) term -> . factor
    (45) factor -> . INTEGER
    (46) factor -> . FLOAT
    (47) factor -> . LPAREN expression RPAREN

    SEMICOLON       shift and go to state 6
    WHILE           shift and go to state 8
    REPEAT          shift and go to state 9
    IF              shift and go to state 10
    FOR             shift and go to state 11
    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 15
    LPAREN          shift and go to state 16

    block                          shift and go to state 65
    stat_list                      shift and go to state 4
    stat                           shift and go to state 5
    expression                     shift and go to state 7
    term                           shift and go to state 12
    factor                         shift and go to state 13

state 58

    (15) else_block -> empty .

    END             reduce using rule 15 (else_block -> empty .)


state 59

    (11) elseif_blocks -> ELSEIF expression . THEN block
    (38) expression -> expression . PLUS term
    (39) expression -> expression . MINUS term

    THEN            shift and go to state 66
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19


state 60

    (16) stat -> FOR IDENTIFIER ASSIGN expression COMMA expression . DO block END
    (38) expression -> expression . PLUS term
    (39) expression -> expression . MINUS term

    DO              shift and go to state 67
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19


state 61

    (17) stat -> FOR namelist IN explist DO block . END

    END             shift and go to state 68


state 62

    (26) explist -> explist COMMA expression .
    (38) expression -> expression . PLUS term
    (39) expression -> expression . MINUS term

    DO              reduce using rule 26 (explist -> explist COMMA expression .)
    COMMA           reduce using rule 26 (explist -> explist COMMA expression .)
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19


state 63

    (10) stat -> IF expression THEN block elseif_blocks else_block END .

    SEMICOLON       reduce using rule 10 (stat -> IF expression THEN block elseif_blocks else_block END .)
    WHILE           reduce using rule 10 (stat -> IF expression THEN block elseif_blocks else_block END .)
    REPEAT          reduce using rule 10 (stat -> IF expression THEN block elseif_blocks else_block END .)
    IF              reduce using rule 10 (stat -> IF expression THEN block elseif_blocks else_block END .)
    FOR             reduce using rule 10 (stat -> IF expression THEN block elseif_blocks else_block END .)
    INTEGER         reduce using rule 10 (stat -> IF expression THEN block elseif_blocks else_block END .)
    FLOAT           reduce using rule 10 (stat -> IF expression THEN block elseif_blocks else_block END .)
    LPAREN          reduce using rule 10 (stat -> IF expression THEN block elseif_blocks else_block END .)
    $end            reduce using rule 10 (stat -> IF expression THEN block elseif_blocks else_block END .)
    UNTIL           reduce using rule 10 (stat -> IF expression THEN block elseif_blocks else_block END .)
    END             reduce using rule 10 (stat -> IF expression THEN block elseif_blocks else_block END .)
    ELSEIF          reduce using rule 10 (stat -> IF expression THEN block elseif_blocks else_block END .)
    ELSE            reduce using rule 10 (stat -> IF expression THEN block elseif_blocks else_block END .)


state 64

    (12) elseif_blocks -> elseif_blocks ELSEIF expression . THEN block
    (38) expression -> expression . PLUS term
    (39) expression -> expression . MINUS term

    THEN            shift and go to state 69
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19


state 65

    (14) else_block -> ELSE block .

    END             reduce using rule 14 (else_block -> ELSE block .)


state 66

    (11) elseif_blocks -> ELSEIF expression THEN . block
    (3) block -> . stat_list
    (4) stat_list -> . stat_list stat
    (5) stat_list -> . stat
    (6) stat -> . SEMICOLON
    (7) stat -> . expression
    (8) stat -> . WHILE expression DO block END
    (9) stat -> . REPEAT block UNTIL expression
    (10) stat -> . IF expression THEN block elseif_blocks else_block END
    (16) stat -> . FOR IDENTIFIER ASSIGN expression COMMA expression DO block END
    (17) stat -> . FOR namelist IN explist DO block END
    (38) expression -> . expression PLUS term
    (39) expression -> . expression MINUS term
    (43) expression -> . term
    (40) term -> . term TIMES factor
    (41) term -> . term DIVIDE factor
    (42) term -> . term POWER factor
    (44) term -> . factor
    (45) factor -> . INTEGER
    (46) factor -> . FLOAT
    (47) factor -> . LPAREN expression RPAREN

    SEMICOLON       shift and go to state 6
    WHILE           shift and go to state 8
    REPEAT          shift and go to state 9
    IF              shift and go to state 10
    FOR             shift and go to state 11
    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 15
    LPAREN          shift and go to state 16

    expression                     shift and go to state 7
    block                          shift and go to state 70
    stat_list                      shift and go to state 4
    stat                           shift and go to state 5
    term                           shift and go to state 12
    factor                         shift and go to state 13

state 67

    (16) stat -> FOR IDENTIFIER ASSIGN expression COMMA expression DO . block END
    (3) block -> . stat_list
    (4) stat_list -> . stat_list stat
    (5) stat_list -> . stat
    (6) stat -> . SEMICOLON
    (7) stat -> . expression
    (8) stat -> . WHILE expression DO block END
    (9) stat -> . REPEAT block UNTIL expression
    (10) stat -> . IF expression THEN block elseif_blocks else_block END
    (16) stat -> . FOR IDENTIFIER ASSIGN expression COMMA expression DO block END
    (17) stat -> . FOR namelist IN explist DO block END
    (38) expression -> . expression PLUS term
    (39) expression -> . expression MINUS term
    (43) expression -> . term
    (40) term -> . term TIMES factor
    (41) term -> . term DIVIDE factor
    (42) term -> . term POWER factor
    (44) term -> . factor
    (45) factor -> . INTEGER
    (46) factor -> . FLOAT
    (47) factor -> . LPAREN expression RPAREN

    SEMICOLON       shift and go to state 6
    WHILE           shift and go to state 8
    REPEAT          shift and go to state 9
    IF              shift and go to state 10
    FOR             shift and go to state 11
    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 15
    LPAREN          shift and go to state 16

    expression                     shift and go to state 7
    block                          shift and go to state 71
    stat_list                      shift and go to state 4
    stat                           shift and go to state 5
    term                           shift and go to state 12
    factor                         shift and go to state 13

state 68

    (17) stat -> FOR namelist IN explist DO block END .

    SEMICOLON       reduce using rule 17 (stat -> FOR namelist IN explist DO block END .)
    WHILE           reduce using rule 17 (stat -> FOR namelist IN explist DO block END .)
    REPEAT          reduce using rule 17 (stat -> FOR namelist IN explist DO block END .)
    IF              reduce using rule 17 (stat -> FOR namelist IN explist DO block END .)
    FOR             reduce using rule 17 (stat -> FOR namelist IN explist DO block END .)
    INTEGER         reduce using rule 17 (stat -> FOR namelist IN explist DO block END .)
    FLOAT           reduce using rule 17 (stat -> FOR namelist IN explist DO block END .)
    LPAREN          reduce using rule 17 (stat -> FOR namelist IN explist DO block END .)
    $end            reduce using rule 17 (stat -> FOR namelist IN explist DO block END .)
    UNTIL           reduce using rule 17 (stat -> FOR namelist IN explist DO block END .)
    END             reduce using rule 17 (stat -> FOR namelist IN explist DO block END .)
    ELSEIF          reduce using rule 17 (stat -> FOR namelist IN explist DO block END .)
    ELSE            reduce using rule 17 (stat -> FOR namelist IN explist DO block END .)


state 69

    (12) elseif_blocks -> elseif_blocks ELSEIF expression THEN . block
    (3) block -> . stat_list
    (4) stat_list -> . stat_list stat
    (5) stat_list -> . stat
    (6) stat -> . SEMICOLON
    (7) stat -> . expression
    (8) stat -> . WHILE expression DO block END
    (9) stat -> . REPEAT block UNTIL expression
    (10) stat -> . IF expression THEN block elseif_blocks else_block END
    (16) stat -> . FOR IDENTIFIER ASSIGN expression COMMA expression DO block END
    (17) stat -> . FOR namelist IN explist DO block END
    (38) expression -> . expression PLUS term
    (39) expression -> . expression MINUS term
    (43) expression -> . term
    (40) term -> . term TIMES factor
    (41) term -> . term DIVIDE factor
    (42) term -> . term POWER factor
    (44) term -> . factor
    (45) factor -> . INTEGER
    (46) factor -> . FLOAT
    (47) factor -> . LPAREN expression RPAREN

    SEMICOLON       shift and go to state 6
    WHILE           shift and go to state 8
    REPEAT          shift and go to state 9
    IF              shift and go to state 10
    FOR             shift and go to state 11
    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 15
    LPAREN          shift and go to state 16

    expression                     shift and go to state 7
    block                          shift and go to state 72
    stat_list                      shift and go to state 4
    stat                           shift and go to state 5
    term                           shift and go to state 12
    factor                         shift and go to state 13

state 70

    (11) elseif_blocks -> ELSEIF expression THEN block .

    ELSEIF          reduce using rule 11 (elseif_blocks -> ELSEIF expression THEN block .)
    ELSE            reduce using rule 11 (elseif_blocks -> ELSEIF expression THEN block .)
    END             reduce using rule 11 (elseif_blocks -> ELSEIF expression THEN block .)


state 71

    (16) stat -> FOR IDENTIFIER ASSIGN expression COMMA expression DO block . END

    END             shift and go to state 73


state 72

    (12) elseif_blocks -> elseif_blocks ELSEIF expression THEN block .

    ELSEIF          reduce using rule 12 (elseif_blocks -> elseif_blocks ELSEIF expression THEN block .)
    ELSE            reduce using rule 12 (elseif_blocks -> elseif_blocks ELSEIF expression THEN block .)
    END             reduce using rule 12 (elseif_blocks -> elseif_blocks ELSEIF expression THEN block .)


state 73

    (16) stat -> FOR IDENTIFIER ASSIGN expression COMMA expression DO block END .

    SEMICOLON       reduce using rule 16 (stat -> FOR IDENTIFIER ASSIGN expression COMMA expression DO block END .)
    WHILE           reduce using rule 16 (stat -> FOR IDENTIFIER ASSIGN expression COMMA expression DO block END .)
    REPEAT          reduce using rule 16 (stat -> FOR IDENTIFIER ASSIGN expression COMMA expression DO block END .)
    IF              reduce using rule 16 (stat -> FOR IDENTIFIER ASSIGN expression COMMA expression DO block END .)
    FOR             reduce using rule 16 (stat -> FOR IDENTIFIER ASSIGN expression COMMA expression DO block END .)
    INTEGER         reduce using rule 16 (stat -> FOR IDENTIFIER ASSIGN expression COMMA expression DO block END .)
    FLOAT           reduce using rule 16 (stat -> FOR IDENTIFIER ASSIGN expression COMMA expression DO block END .)
    LPAREN          reduce using rule 16 (stat -> FOR IDENTIFIER ASSIGN expression COMMA expression DO block END .)
    $end            reduce using rule 16 (stat -> FOR IDENTIFIER ASSIGN expression COMMA expression DO block END .)
    UNTIL           reduce using rule 16 (stat -> FOR IDENTIFIER ASSIGN expression COMMA expression DO block END .)
    END             reduce using rule 16 (stat -> FOR IDENTIFIER ASSIGN expression COMMA expression DO block END .)
    ELSEIF          reduce using rule 16 (stat -> FOR IDENTIFIER ASSIGN expression COMMA expression DO block END .)
    ELSE            reduce using rule 16 (stat -> FOR IDENTIFIER ASSIGN expression COMMA expression DO block END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSEIF in state 43 resolved as shift
