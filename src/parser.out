Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    ASSIGN
    BREAK
    COLON
    COMMA
    CONCAT
    DIVIDEASSIGN
    DO
    DOT
    DOUBLECOLON
    ELSE
    ELSEIF
    END
    EQUALS
    FALSE
    FOR
    FUNCTION
    GOTO
    GREATER
    GREATEREQUALS
    IDENTIFIER
    IF
    IN
    LBRACE
    LBRACKET
    LEN
    LOCAL
    LOWER
    LOWEREQUALS
    MINUSASSIGN
    MOD
    MODASSIGN
    NEQUALS
    NIL
    NOT
    OR
    PLUSASSIGN
    POWER
    POWERASSIGN
    RBRACE
    RBRACKET
    REPEAT
    RETURN
    SEMICOLON
    THEN
    TIMESASSIGN
    TRUE
    UNTIL
    WHILE

Grammar

Rule 0     S' -> start
Rule 1     start -> expression
Rule 2     start -> print
Rule 3     expression -> expression PLUS term
Rule 4     expression -> expression MINUS term
Rule 5     expression -> term
Rule 6     term -> term TIMES factor
Rule 7     term -> term DIVIDE factor
Rule 8     term -> factor
Rule 9     factor -> INTEGER
Rule 10    factor -> FLOAT
Rule 11    factor -> LPAREN expression RPAREN
Rule 12    print -> PRINT factor
Rule 13    print -> PRINT LPAREN STRING RPAREN

Terminals, with rules where they appear

AND                  : 
ASSIGN               : 
BREAK                : 
COLON                : 
COMMA                : 
CONCAT               : 
DIVIDE               : 7
DIVIDEASSIGN         : 
DO                   : 
DOT                  : 
DOUBLECOLON          : 
ELSE                 : 
ELSEIF               : 
END                  : 
EQUALS               : 
FALSE                : 
FLOAT                : 10
FOR                  : 
FUNCTION             : 
GOTO                 : 
GREATER              : 
GREATEREQUALS        : 
IDENTIFIER           : 
IF                   : 
IN                   : 
INTEGER              : 9
LBRACE               : 
LBRACKET             : 
LEN                  : 
LOCAL                : 
LOWER                : 
LOWEREQUALS          : 
LPAREN               : 11 13
MINUS                : 4
MINUSASSIGN          : 
MOD                  : 
MODASSIGN            : 
NEQUALS              : 
NIL                  : 
NOT                  : 
OR                   : 
PLUS                 : 3
PLUSASSIGN           : 
POWER                : 
POWERASSIGN          : 
PRINT                : 12 13
RBRACE               : 
RBRACKET             : 
REPEAT               : 
RETURN               : 
RPAREN               : 11 13
SEMICOLON            : 
STRING               : 13
THEN                 : 
TIMES                : 6
TIMESASSIGN          : 
TRUE                 : 
UNTIL                : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

expression           : 1 3 4 11
factor               : 6 7 8 12
print                : 2
start                : 0
term                 : 3 4 5 6 7

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . expression
    (2) start -> . print
    (3) expression -> . expression PLUS term
    (4) expression -> . expression MINUS term
    (5) expression -> . term
    (12) print -> . PRINT factor
    (13) print -> . PRINT LPAREN STRING RPAREN
    (6) term -> . term TIMES factor
    (7) term -> . term DIVIDE factor
    (8) term -> . factor
    (9) factor -> . INTEGER
    (10) factor -> . FLOAT
    (11) factor -> . LPAREN expression RPAREN

    PRINT           shift and go to state 5
    INTEGER         shift and go to state 8
    FLOAT           shift and go to state 9
    LPAREN          shift and go to state 7

    start                          shift and go to state 1
    expression                     shift and go to state 2
    print                          shift and go to state 3
    term                           shift and go to state 4
    factor                         shift and go to state 6

state 1

    (0) S' -> start .



state 2

    (1) start -> expression .
    (3) expression -> expression . PLUS term
    (4) expression -> expression . MINUS term

    $end            reduce using rule 1 (start -> expression .)
    PLUS            shift and go to state 10
    MINUS           shift and go to state 11


state 3

    (2) start -> print .

    $end            reduce using rule 2 (start -> print .)


state 4

    (5) expression -> term .
    (6) term -> term . TIMES factor
    (7) term -> term . DIVIDE factor

    PLUS            reduce using rule 5 (expression -> term .)
    MINUS           reduce using rule 5 (expression -> term .)
    $end            reduce using rule 5 (expression -> term .)
    RPAREN          reduce using rule 5 (expression -> term .)
    TIMES           shift and go to state 12
    DIVIDE          shift and go to state 13


state 5

    (12) print -> PRINT . factor
    (13) print -> PRINT . LPAREN STRING RPAREN
    (9) factor -> . INTEGER
    (10) factor -> . FLOAT
    (11) factor -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 15
    INTEGER         shift and go to state 8
    FLOAT           shift and go to state 9

    factor                         shift and go to state 14

state 6

    (8) term -> factor .

    TIMES           reduce using rule 8 (term -> factor .)
    DIVIDE          reduce using rule 8 (term -> factor .)
    PLUS            reduce using rule 8 (term -> factor .)
    MINUS           reduce using rule 8 (term -> factor .)
    $end            reduce using rule 8 (term -> factor .)
    RPAREN          reduce using rule 8 (term -> factor .)


state 7

    (11) factor -> LPAREN . expression RPAREN
    (3) expression -> . expression PLUS term
    (4) expression -> . expression MINUS term
    (5) expression -> . term
    (6) term -> . term TIMES factor
    (7) term -> . term DIVIDE factor
    (8) term -> . factor
    (9) factor -> . INTEGER
    (10) factor -> . FLOAT
    (11) factor -> . LPAREN expression RPAREN

    INTEGER         shift and go to state 8
    FLOAT           shift and go to state 9
    LPAREN          shift and go to state 7

    expression                     shift and go to state 16
    term                           shift and go to state 4
    factor                         shift and go to state 6

state 8

    (9) factor -> INTEGER .

    TIMES           reduce using rule 9 (factor -> INTEGER .)
    DIVIDE          reduce using rule 9 (factor -> INTEGER .)
    PLUS            reduce using rule 9 (factor -> INTEGER .)
    MINUS           reduce using rule 9 (factor -> INTEGER .)
    $end            reduce using rule 9 (factor -> INTEGER .)
    RPAREN          reduce using rule 9 (factor -> INTEGER .)


state 9

    (10) factor -> FLOAT .

    TIMES           reduce using rule 10 (factor -> FLOAT .)
    DIVIDE          reduce using rule 10 (factor -> FLOAT .)
    PLUS            reduce using rule 10 (factor -> FLOAT .)
    MINUS           reduce using rule 10 (factor -> FLOAT .)
    $end            reduce using rule 10 (factor -> FLOAT .)
    RPAREN          reduce using rule 10 (factor -> FLOAT .)


state 10

    (3) expression -> expression PLUS . term
    (6) term -> . term TIMES factor
    (7) term -> . term DIVIDE factor
    (8) term -> . factor
    (9) factor -> . INTEGER
    (10) factor -> . FLOAT
    (11) factor -> . LPAREN expression RPAREN

    INTEGER         shift and go to state 8
    FLOAT           shift and go to state 9
    LPAREN          shift and go to state 7

    term                           shift and go to state 17
    factor                         shift and go to state 6

state 11

    (4) expression -> expression MINUS . term
    (6) term -> . term TIMES factor
    (7) term -> . term DIVIDE factor
    (8) term -> . factor
    (9) factor -> . INTEGER
    (10) factor -> . FLOAT
    (11) factor -> . LPAREN expression RPAREN

    INTEGER         shift and go to state 8
    FLOAT           shift and go to state 9
    LPAREN          shift and go to state 7

    term                           shift and go to state 18
    factor                         shift and go to state 6

state 12

    (6) term -> term TIMES . factor
    (9) factor -> . INTEGER
    (10) factor -> . FLOAT
    (11) factor -> . LPAREN expression RPAREN

    INTEGER         shift and go to state 8
    FLOAT           shift and go to state 9
    LPAREN          shift and go to state 7

    factor                         shift and go to state 19

state 13

    (7) term -> term DIVIDE . factor
    (9) factor -> . INTEGER
    (10) factor -> . FLOAT
    (11) factor -> . LPAREN expression RPAREN

    INTEGER         shift and go to state 8
    FLOAT           shift and go to state 9
    LPAREN          shift and go to state 7

    factor                         shift and go to state 20

state 14

    (12) print -> PRINT factor .

    $end            reduce using rule 12 (print -> PRINT factor .)


state 15

    (13) print -> PRINT LPAREN . STRING RPAREN
    (11) factor -> LPAREN . expression RPAREN
    (3) expression -> . expression PLUS term
    (4) expression -> . expression MINUS term
    (5) expression -> . term
    (6) term -> . term TIMES factor
    (7) term -> . term DIVIDE factor
    (8) term -> . factor
    (9) factor -> . INTEGER
    (10) factor -> . FLOAT
    (11) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 21
    INTEGER         shift and go to state 8
    FLOAT           shift and go to state 9
    LPAREN          shift and go to state 7

    expression                     shift and go to state 16
    term                           shift and go to state 4
    factor                         shift and go to state 6

state 16

    (11) factor -> LPAREN expression . RPAREN
    (3) expression -> expression . PLUS term
    (4) expression -> expression . MINUS term

    RPAREN          shift and go to state 22
    PLUS            shift and go to state 10
    MINUS           shift and go to state 11


state 17

    (3) expression -> expression PLUS term .
    (6) term -> term . TIMES factor
    (7) term -> term . DIVIDE factor

    PLUS            reduce using rule 3 (expression -> expression PLUS term .)
    MINUS           reduce using rule 3 (expression -> expression PLUS term .)
    $end            reduce using rule 3 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 3 (expression -> expression PLUS term .)
    TIMES           shift and go to state 12
    DIVIDE          shift and go to state 13


state 18

    (4) expression -> expression MINUS term .
    (6) term -> term . TIMES factor
    (7) term -> term . DIVIDE factor

    PLUS            reduce using rule 4 (expression -> expression MINUS term .)
    MINUS           reduce using rule 4 (expression -> expression MINUS term .)
    $end            reduce using rule 4 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 4 (expression -> expression MINUS term .)
    TIMES           shift and go to state 12
    DIVIDE          shift and go to state 13


state 19

    (6) term -> term TIMES factor .

    TIMES           reduce using rule 6 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 6 (term -> term TIMES factor .)
    PLUS            reduce using rule 6 (term -> term TIMES factor .)
    MINUS           reduce using rule 6 (term -> term TIMES factor .)
    $end            reduce using rule 6 (term -> term TIMES factor .)
    RPAREN          reduce using rule 6 (term -> term TIMES factor .)


state 20

    (7) term -> term DIVIDE factor .

    TIMES           reduce using rule 7 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 7 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 7 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 7 (term -> term DIVIDE factor .)
    $end            reduce using rule 7 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 7 (term -> term DIVIDE factor .)


state 21

    (13) print -> PRINT LPAREN STRING . RPAREN

    RPAREN          shift and go to state 23


state 22

    (11) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 11 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 11 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 11 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 11 (factor -> LPAREN expression RPAREN .)
    $end            reduce using rule 11 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 11 (factor -> LPAREN expression RPAREN .)


state 23

    (13) print -> PRINT LPAREN STRING RPAREN .

    $end            reduce using rule 13 (print -> PRINT LPAREN STRING RPAREN .)

