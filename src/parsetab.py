
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BREAK COLON COMMA CONCAT DIVIDE DIVIDEASSIGN DO DOT DOUBLECOLON ELSE ELSEIF END EQUALS FALSE FLOAT FOR FUNCTION GOTO GREATER GREATEREQUALS IDENTIFIER IF IN INPUT INTEGER LBRACE LBRACKET LEN LOCAL LOWER LOWEREQUALS LPAREN MINUS MINUSASSIGN MOD MODASSIGN NEQUALS NIL NOT OR PLUS PLUSASSIGN POWER POWERASSIGN PRINT RBRACE RBRACKET REPEAT RETURN RPAREN SEMICOLON STRING THEN TIMES TIMESASSIGN TRUE UNTIL VARARG WHILEstart : chunkchunk : blockblock : stat_list retstat_optstat_list : stat_list stat\n| emptyretstat_opt : retstat\n| emptystat : SEMICOLON\n| varlist ASSIGN explist\n| functioncall\n| BREAKstat : GOTO IDENTIFIERstat : DO block ENDstat : WHILE expression DO block ENDstat : REPEAT block UNTIL expressionstat : IF expression THEN block elseif_blocks else_block ENDelseif_blocks : ELSEIF expression THEN block\n| elseif_blocks ELSEIF expression THEN block\n| emptyelse_block : ELSE block\n| emptystat : FOR IDENTIFIER ASSIGN expression COMMA expression DO block ENDstat : FOR namelist IN explist DO block ENDstat : FUNCTION funcname funcbodystat : LOCAL FUNCTION IDENTIFIER funcbodyempty :retstat : RETURN explist SEMICOLON\n| RETURN explist\n| RETURN SEMICOLON\n| RETURNstat : DOUBLECOLON IDENTIFIER DOUBLECOLONfuncname : IDENTIFIER funcname_tail method_optfuncname_tail : funcname_tail DOT IDENTIFIER\n| emptymethod_opt : COLON IDENTIFIER\n| emptyvarlist : var\n| varlist COMMA varvar : IDENTIFIER\n| prefixexp LBRACKET expression RBRACKET\n| prefixexp DOT IDENTIFIERnamelist : IDENTIFIER\n| namelist COMMA IDENTIFIERexplist : expression\n| explist COMMA expressionprefixexp : var\n| functioncall\n| LPAREN expression RPARENfunctioncall : prefixexp args\n| prefixexp COLON IDENTIFIER argsargs : LPAREN RPAREN\n| LPAREN explist RPAREN\n| STRING\n| tableconstructorexpression : FUNCTION funcbodyfuncbody : LPAREN RPAREN block END\n| LPAREN parlist RPAREN block ENDparlist : namelist vararg_tail\n| VARARGvararg_tail : COMMA VARARG\n| emptytableconstructor : LBRACE RBRACE\n| LBRACE fieldlist RBRACEfieldlist : field fieldsep_tailfieldsep_tail : fieldsep fieldfield_tail_opt\n| emptyfieldfield_tail_opt : fieldlist\n| emptyfield : LBRACKET expression RBRACKET ASSIGN expression\n| IDENTIFIER ASSIGN expression\n| expressionfieldsep : COMMA\n| SEMICOLONstatement : inputstatement : printexpression : expression PLUS term\n           | expression MINUS term\nterm       : term TIMES factor\n           | term DIVIDE factor\n           | term POWER factorexpression : termterm : factorfactor : INTEGERfactor : FLOATfactor : LPAREN expression RPARENprint : PRINT LPAREN expression RPAREN\n| PRINT LPAREN STRING RPARENinput : INPUT LPAREN RPAREN'
    
_lr_action_items = {'SEMICOLON':([0,4,5,7,10,12,13,16,18,24,30,34,35,36,37,47,49,50,55,56,59,63,64,67,74,78,82,88,90,92,94,98,99,100,105,106,107,108,109,118,119,120,122,123,131,133,141,148,149,154,160,161,164,165,166,167,168,172,],[-26,10,-5,-4,-8,-10,-11,-26,-26,48,-12,-81,-82,-83,-84,83,-44,-49,-53,-54,-9,-13,-26,-55,-26,-24,-31,-51,-62,128,-71,-76,-77,-26,-78,-79,-80,-85,-15,-25,-45,-50,-52,-63,-14,-26,-26,-70,-56,-26,-57,-16,-26,-26,-23,-69,-26,-22,]),'BREAK':([0,4,5,7,10,12,13,16,18,30,34,35,36,37,49,50,55,56,59,63,64,67,74,78,82,88,90,98,99,100,105,106,107,108,109,118,119,120,122,123,131,133,141,149,154,160,161,164,165,166,168,172,],[-26,13,-5,-4,-8,-10,-11,-26,-26,-12,-81,-82,-83,-84,-44,-49,-53,-54,-9,-13,-26,-55,-26,-24,-31,-51,-62,-76,-77,-26,-78,-79,-80,-85,-15,-25,-45,-50,-52,-63,-14,-26,-26,-56,-26,-57,-16,-26,-26,-23,-26,-22,]),'GOTO':([0,4,5,7,10,12,13,16,18,30,34,35,36,37,49,50,55,56,59,63,64,67,74,78,82,88,90,98,99,100,105,106,107,108,109,118,119,120,122,123,131,133,141,149,154,160,161,164,165,166,168,172,],[-26,14,-5,-4,-8,-10,-11,-26,-26,-12,-81,-82,-83,-84,-44,-49,-53,-54,-9,-13,-26,-55,-26,-24,-31,-51,-62,-76,-77,-26,-78,-79,-80,-85,-15,-25,-45,-50,-52,-63,-14,-26,-26,-56,-26,-57,-16,-26,-26,-23,-26,-22,]),'DO':([0,4,5,7,10,12,13,16,18,30,32,34,35,36,37,49,50,55,56,59,63,64,67,74,78,82,88,90,98,99,100,105,106,107,108,109,112,118,119,120,122,123,131,133,141,149,154,157,160,161,164,165,166,168,172,],[-26,16,-5,-4,-8,-10,-11,-26,-26,-12,64,-81,-82,-83,-84,-44,-49,-53,-54,-9,-13,-26,-55,-26,-24,-31,-51,-62,-76,-77,-26,-78,-79,-80,-85,-15,141,-25,-45,-50,-52,-63,-14,-26,-26,-56,-26,165,-57,-16,-26,-26,-23,-26,-22,]),'WHILE':([0,4,5,7,10,12,13,16,18,30,34,35,36,37,49,50,55,56,59,63,64,67,74,78,82,88,90,98,99,100,105,106,107,108,109,118,119,120,122,123,131,133,141,149,154,160,161,164,165,166,168,172,],[-26,17,-5,-4,-8,-10,-11,-26,-26,-12,-81,-82,-83,-84,-44,-49,-53,-54,-9,-13,-26,-55,-26,-24,-31,-51,-62,-76,-77,-26,-78,-79,-80,-85,-15,-25,-45,-50,-52,-63,-14,-26,-26,-56,-26,-57,-16,-26,-26,-23,-26,-22,]),'REPEAT':([0,4,5,7,10,12,13,16,18,30,34,35,36,37,49,50,55,56,59,63,64,67,74,78,82,88,90,98,99,100,105,106,107,108,109,118,119,120,122,123,131,133,141,149,154,160,161,164,165,166,168,172,],[-26,18,-5,-4,-8,-10,-11,-26,-26,-12,-81,-82,-83,-84,-44,-49,-53,-54,-9,-13,-26,-55,-26,-24,-31,-51,-62,-76,-77,-26,-78,-79,-80,-85,-15,-25,-45,-50,-52,-63,-14,-26,-26,-56,-26,-57,-16,-26,-26,-23,-26,-22,]),'IF':([0,4,5,7,10,12,13,16,18,30,34,35,36,37,49,50,55,56,59,63,64,67,74,78,82,88,90,98,99,100,105,106,107,108,109,118,119,120,122,123,131,133,141,149,154,160,161,164,165,166,168,172,],[-26,19,-5,-4,-8,-10,-11,-26,-26,-12,-81,-82,-83,-84,-44,-49,-53,-54,-9,-13,-26,-55,-26,-24,-31,-51,-62,-76,-77,-26,-78,-79,-80,-85,-15,-25,-45,-50,-52,-63,-14,-26,-26,-56,-26,-57,-16,-26,-26,-23,-26,-22,]),'FOR':([0,4,5,7,10,12,13,16,18,30,34,35,36,37,49,50,55,56,59,63,64,67,74,78,82,88,90,98,99,100,105,106,107,108,109,118,119,120,122,123,131,133,141,149,154,160,161,164,165,166,168,172,],[-26,20,-5,-4,-8,-10,-11,-26,-26,-12,-81,-82,-83,-84,-44,-49,-53,-54,-9,-13,-26,-55,-26,-24,-31,-51,-62,-76,-77,-26,-78,-79,-80,-85,-15,-25,-45,-50,-52,-63,-14,-26,-26,-56,-26,-57,-16,-26,-26,-23,-26,-22,]),'FUNCTION':([0,4,5,7,10,12,13,16,17,18,19,22,24,27,28,30,34,35,36,37,38,49,50,52,54,55,56,57,59,63,64,67,73,74,75,76,78,82,84,88,90,93,98,99,100,105,106,107,108,109,118,119,120,122,123,125,127,128,130,131,133,138,140,141,149,153,154,159,160,161,164,165,166,168,172,],[-26,21,-5,-4,-8,-10,-11,-26,33,-26,33,45,33,33,33,-12,-81,-82,-83,-84,33,-44,-49,33,33,-53,-54,33,-9,-13,-26,-55,33,-26,33,33,-24,-31,33,-51,-62,33,-76,-77,-26,-78,-79,-80,-85,-15,-25,-45,-50,-52,-63,33,-72,-73,33,-14,-26,33,33,-26,-56,33,-26,33,-57,-16,-26,-26,-23,-26,-22,]),'LOCAL':([0,4,5,7,10,12,13,16,18,30,34,35,36,37,49,50,55,56,59,63,64,67,74,78,82,88,90,98,99,100,105,106,107,108,109,118,119,120,122,123,131,133,141,149,154,160,161,164,165,166,168,172,],[-26,22,-5,-4,-8,-10,-11,-26,-26,-12,-81,-82,-83,-84,-44,-49,-53,-54,-9,-13,-26,-55,-26,-24,-31,-51,-62,-76,-77,-26,-78,-79,-80,-85,-15,-25,-45,-50,-52,-63,-14,-26,-26,-56,-26,-57,-16,-26,-26,-23,-26,-22,]),'DOUBLECOLON':([0,4,5,7,10,12,13,16,18,30,34,35,36,37,46,49,50,55,56,59,63,64,67,74,78,82,88,90,98,99,100,105,106,107,108,109,118,119,120,122,123,131,133,141,149,154,160,161,164,165,166,168,172,],[-26,23,-5,-4,-8,-10,-11,-26,-26,-12,-81,-82,-83,-84,82,-44,-49,-53,-54,-9,-13,-26,-55,-26,-24,-31,-51,-62,-76,-77,-26,-78,-79,-80,-85,-15,-25,-45,-50,-52,-63,-14,-26,-26,-56,-26,-57,-16,-26,-26,-23,-26,-22,]),'RETURN':([0,4,5,7,10,12,13,16,18,30,34,35,36,37,49,50,55,56,59,63,64,67,74,78,82,88,90,98,99,100,105,106,107,108,109,118,119,120,122,123,131,133,141,149,154,160,161,164,165,166,168,172,],[-26,24,-5,-4,-8,-10,-11,-26,-26,-12,-81,-82,-83,-84,-44,-49,-53,-54,-9,-13,-26,-55,-26,-24,-31,-51,-62,-76,-77,-26,-78,-79,-80,-85,-15,-25,-45,-50,-52,-63,-14,-26,-26,-56,-26,-57,-16,-26,-26,-23,-26,-22,]),'IDENTIFIER':([0,4,5,7,10,12,13,14,16,18,20,21,23,29,30,34,35,36,37,45,49,50,51,53,55,56,57,59,63,64,67,68,74,77,78,82,88,90,98,99,100,105,106,107,108,109,115,116,118,119,120,122,123,125,127,128,131,133,135,141,149,154,160,161,164,165,166,168,172,],[-26,15,-5,-4,-8,-10,-11,30,-26,-26,41,44,46,15,-12,-81,-82,-83,-84,81,-44,-49,85,87,-53,-54,95,-9,-13,-26,-55,104,-26,113,-24,-31,-51,-62,-76,-77,-26,-78,-79,-80,-85,-15,142,143,-25,-45,-50,-52,-63,95,-72,-73,-14,-26,113,-26,-56,-26,-57,-16,-26,-26,-23,-26,-22,]),'LPAREN':([0,4,5,7,10,12,13,15,16,17,18,19,24,25,26,27,28,29,30,33,34,35,36,37,38,43,44,49,50,52,54,55,56,57,59,60,61,62,63,64,65,66,67,69,70,71,73,74,75,76,78,79,80,81,82,84,85,87,88,90,93,96,98,99,100,105,106,107,108,109,114,117,118,119,120,121,122,123,125,127,128,130,131,133,138,140,141,142,143,149,153,154,159,160,161,164,165,166,168,172,],[-26,27,-5,-4,-8,-10,-11,-39,-26,38,-26,38,38,-46,54,38,38,27,-12,68,-81,-82,-83,-84,38,68,-26,-44,-49,38,38,-53,-54,38,-9,-46,54,-47,-13,-26,38,38,-55,38,38,38,38,-26,38,38,-24,-26,-34,68,-31,38,54,-41,-51,-62,38,-48,-76,-77,-26,-78,-79,-80,-85,-15,-32,-36,-25,-45,-50,-40,-52,-63,38,-72,-73,38,-14,-26,38,38,-26,-33,-35,-56,38,-26,38,-57,-16,-26,-26,-23,-26,-22,]),'$end':([0,1,2,3,4,5,6,7,8,9,10,12,13,24,30,34,35,36,37,47,48,49,50,55,56,59,63,67,78,82,83,88,90,98,99,105,106,107,108,109,118,119,120,122,123,131,149,160,161,166,172,],[-26,0,-1,-2,-26,-5,-3,-4,-6,-7,-8,-10,-11,-30,-12,-81,-82,-83,-84,-28,-29,-44,-49,-53,-54,-9,-13,-55,-24,-31,-27,-51,-62,-76,-77,-78,-79,-80,-85,-15,-25,-45,-50,-52,-63,-14,-56,-57,-16,-23,-22,]),'END':([4,5,6,7,8,9,10,12,13,16,24,30,31,34,35,36,37,47,48,49,50,55,56,59,63,64,67,74,78,82,83,88,90,97,98,99,100,105,106,107,108,109,110,118,119,120,122,123,131,132,133,137,139,141,149,150,152,154,155,158,160,161,163,164,165,166,168,169,170,171,172,],[-26,-5,-3,-4,-6,-7,-8,-10,-11,-26,-30,-12,63,-81,-82,-83,-84,-28,-29,-44,-49,-53,-54,-9,-13,-26,-55,-26,-24,-31,-27,-51,-62,131,-76,-77,-26,-78,-79,-80,-85,-15,-26,-25,-45,-50,-52,-63,-14,149,-26,-26,-19,-26,-56,160,161,-26,-21,166,-57,-16,-20,-26,-26,-23,-26,-17,172,-18,-22,]),'UNTIL':([4,5,6,7,8,9,10,12,13,18,24,30,34,35,36,37,39,47,48,49,50,55,56,59,63,67,78,82,83,88,90,98,99,105,106,107,108,109,118,119,120,122,123,131,149,160,161,166,172,],[-26,-5,-3,-4,-6,-7,-8,-10,-11,-26,-30,-12,-81,-82,-83,-84,73,-28,-29,-44,-49,-53,-54,-9,-13,-55,-24,-31,-27,-51,-62,-76,-77,-78,-79,-80,-85,-15,-25,-45,-50,-52,-63,-14,-56,-57,-16,-23,-22,]),'ELSEIF':([4,5,6,7,8,9,10,12,13,24,30,34,35,36,37,47,48,49,50,55,56,59,63,67,74,78,82,83,88,90,98,99,105,106,107,108,109,110,118,119,120,122,123,131,137,139,149,160,161,164,166,168,169,171,172,],[-26,-5,-3,-4,-6,-7,-8,-10,-11,-30,-12,-81,-82,-83,-84,-28,-29,-44,-49,-53,-54,-9,-13,-55,-26,-24,-31,-27,-51,-62,-76,-77,-78,-79,-80,-85,-15,138,-25,-45,-50,-52,-63,-14,153,-19,-56,-57,-16,-26,-23,-26,-17,-18,-22,]),'ELSE':([4,5,6,7,8,9,10,12,13,24,30,34,35,36,37,47,48,49,50,55,56,59,63,67,74,78,82,83,88,90,98,99,105,106,107,108,109,110,118,119,120,122,123,131,137,139,149,160,161,164,166,168,169,171,172,],[-26,-5,-3,-4,-6,-7,-8,-10,-11,-30,-12,-81,-82,-83,-84,-28,-29,-44,-49,-53,-54,-9,-13,-55,-26,-24,-31,-27,-51,-62,-76,-77,-78,-79,-80,-85,-15,-26,-25,-45,-50,-52,-63,-14,154,-19,-56,-57,-16,-26,-23,-26,-17,-18,-22,]),'ASSIGN':([11,15,25,41,60,87,95,121,147,],[28,-39,-37,75,-38,-41,130,-40,159,]),'COMMA':([11,15,25,34,35,36,37,41,42,47,49,59,60,67,87,89,92,94,98,99,102,104,105,106,107,108,111,112,113,119,121,148,149,160,167,],[29,-39,-37,-81,-82,-83,-84,-42,77,84,-44,84,-38,-55,-41,84,127,-71,-76,-77,135,-42,-78,-79,-80,-85,140,84,-43,-45,-40,-70,-56,-57,-69,]),'COLON':([12,15,25,26,44,50,55,56,60,61,62,79,80,87,88,90,96,120,121,122,123,142,],[-47,-39,-46,51,-26,-49,-53,-54,-46,51,-47,116,-34,-41,-51,-62,-48,-50,-40,-52,-63,-33,]),'LBRACKET':([12,15,25,26,50,55,56,57,60,61,62,87,88,90,96,120,121,122,123,125,127,128,],[-47,-39,-46,52,-49,-53,-54,93,-46,52,-47,-41,-51,-62,-48,-50,-40,-52,-63,93,-72,-73,]),'DOT':([12,15,25,26,44,50,55,56,60,61,62,79,80,87,88,90,96,120,121,122,123,142,],[-47,-39,-46,53,-26,-49,-53,-54,-46,53,-47,115,-34,-41,-51,-62,-48,-50,-40,-52,-63,-33,]),'STRING':([12,15,25,26,50,55,56,60,61,62,85,87,88,90,96,120,121,122,123,],[-47,-39,-46,55,-49,-53,-54,-46,55,-47,55,-41,-51,-62,-48,-50,-40,-52,-63,]),'LBRACE':([12,15,25,26,50,55,56,60,61,62,85,87,88,90,96,120,121,122,123,],[-47,-39,-46,57,-49,-53,-54,-46,57,-47,57,-41,-51,-62,-48,-50,-40,-52,-63,]),'INTEGER':([17,19,24,27,28,38,52,54,57,65,66,69,70,71,73,75,76,84,93,125,127,128,130,138,140,153,159,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-72,-73,36,36,36,36,36,]),'FLOAT':([17,19,24,27,28,38,52,54,57,65,66,69,70,71,73,75,76,84,93,125,127,128,130,138,140,153,159,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-72,-73,37,37,37,37,37,]),'PLUS':([32,34,35,36,37,40,49,58,67,72,86,94,98,99,105,106,107,108,109,111,119,129,148,149,156,157,160,162,167,],[65,-81,-82,-83,-84,65,65,65,-55,65,65,65,-76,-77,-78,-79,-80,-85,65,65,65,65,65,-56,65,65,-57,65,65,]),'MINUS':([32,34,35,36,37,40,49,58,67,72,86,94,98,99,105,106,107,108,109,111,119,129,148,149,156,157,160,162,167,],[66,-81,-82,-83,-84,66,66,66,-55,66,66,66,-76,-77,-78,-79,-80,-85,66,66,66,66,66,-56,66,66,-57,66,66,]),'THEN':([34,35,36,37,40,67,98,99,105,106,107,108,149,156,160,162,],[-81,-82,-83,-84,74,-55,-76,-77,-78,-79,-80,-85,-56,164,-57,168,]),'RPAREN':([34,35,36,37,49,54,58,67,68,72,89,98,99,101,102,103,104,105,106,107,108,113,119,134,136,149,151,160,],[-81,-82,-83,-84,-44,88,96,-55,100,108,122,-76,-77,133,-26,-59,-42,-78,-79,-80,-85,-43,-45,-58,-61,-56,-60,-57,]),'RBRACKET':([34,35,36,37,67,86,98,99,105,106,107,108,129,149,160,],[-81,-82,-83,-84,-55,121,-76,-77,-78,-79,-80,-85,147,-56,-57,]),'RBRACE':([34,35,36,37,57,67,91,92,94,98,99,105,106,107,108,124,125,126,127,128,144,145,146,148,149,160,167,],[-81,-82,-83,-84,90,-55,123,-26,-71,-76,-77,-78,-79,-80,-85,-64,-26,-66,-72,-73,-65,-67,-68,-70,-56,-57,-69,]),'TIMES':([34,35,36,37,98,99,105,106,107,108,],[69,-82,-83,-84,69,69,-78,-79,-80,-85,]),'DIVIDE':([34,35,36,37,98,99,105,106,107,108,],[70,-82,-83,-84,70,70,-78,-79,-80,-85,]),'POWER':([34,35,36,37,98,99,105,106,107,108,],[71,-82,-83,-84,71,71,-78,-79,-80,-85,]),'IN':([41,42,113,],[-42,76,-43,]),'VARARG':([68,135,],[103,151,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'chunk':([0,],[2,]),'block':([0,16,18,64,74,100,133,141,154,164,165,168,],[3,31,39,97,110,132,150,158,163,169,170,171,]),'stat_list':([0,16,18,64,74,100,133,141,154,164,165,168,],[4,4,4,4,4,4,4,4,4,4,4,4,]),'empty':([0,4,16,18,44,64,74,79,92,100,102,110,125,133,137,141,154,164,165,168,],[5,9,5,5,80,5,5,117,126,5,136,139,146,5,155,5,5,5,5,5,]),'retstat_opt':([4,],[6,]),'stat':([4,],[7,]),'retstat':([4,],[8,]),'varlist':([4,],[11,]),'functioncall':([4,29,],[12,62,]),'var':([4,29,],[25,60,]),'prefixexp':([4,29,],[26,61,]),'expression':([17,19,24,27,28,38,52,54,57,73,75,76,84,93,125,130,138,140,153,159,],[32,40,49,58,49,72,86,49,94,109,111,49,119,129,94,148,156,157,162,167,]),'term':([17,19,24,27,28,38,52,54,57,65,66,73,75,76,84,93,125,130,138,140,153,159,],[34,34,34,34,34,34,34,34,34,98,99,34,34,34,34,34,34,34,34,34,34,34,]),'factor':([17,19,24,27,28,38,52,54,57,65,66,69,70,71,73,75,76,84,93,125,130,138,140,153,159,],[35,35,35,35,35,35,35,35,35,35,35,105,106,107,35,35,35,35,35,35,35,35,35,35,35,]),'namelist':([20,68,],[42,102,]),'funcname':([21,],[43,]),'explist':([24,28,54,76,],[47,59,89,112,]),'args':([26,61,85,],[50,50,120,]),'tableconstructor':([26,61,85,],[56,56,56,]),'funcbody':([33,43,81,],[67,78,118,]),'funcname_tail':([44,],[79,]),'fieldlist':([57,125,],[91,145,]),'field':([57,125,],[92,92,]),'parlist':([68,],[101,]),'method_opt':([79,],[114,]),'fieldsep_tail':([92,],[124,]),'fieldsep':([92,],[125,]),'vararg_tail':([102,],[134,]),'elseif_blocks':([110,],[137,]),'fieldfield_tail_opt':([125,],[144,]),'else_block':([137,],[152,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> chunk','start',1,'p_start','lua_yacc_builder.py',9),
  ('chunk -> block','chunk',1,'p_chunk','lua_yacc_builder.py',15),
  ('block -> stat_list retstat_opt','block',2,'p_block','lua_yacc_builder.py',19),
  ('stat_list -> stat_list stat','stat_list',2,'p_stat_list','lua_yacc_builder.py',23),
  ('stat_list -> empty','stat_list',1,'p_stat_list','lua_yacc_builder.py',24),
  ('retstat_opt -> retstat','retstat_opt',1,'p_retstat_opt','lua_yacc_builder.py',28),
  ('retstat_opt -> empty','retstat_opt',1,'p_retstat_opt','lua_yacc_builder.py',29),
  ('stat -> SEMICOLON','stat',1,'p_stat','lua_yacc_builder.py',33),
  ('stat -> varlist ASSIGN explist','stat',3,'p_stat','lua_yacc_builder.py',34),
  ('stat -> functioncall','stat',1,'p_stat','lua_yacc_builder.py',35),
  ('stat -> BREAK','stat',1,'p_stat','lua_yacc_builder.py',36),
  ('stat -> GOTO IDENTIFIER','stat',2,'p_goto','lua_yacc_builder.py',40),
  ('stat -> DO block END','stat',3,'p_do','lua_yacc_builder.py',44),
  ('stat -> WHILE expression DO block END','stat',5,'p_stat_while','lua_yacc_builder.py',49),
  ('stat -> REPEAT block UNTIL expression','stat',4,'p_stat_repeat','lua_yacc_builder.py',54),
  ('stat -> IF expression THEN block elseif_blocks else_block END','stat',7,'p_stat_if','lua_yacc_builder.py',58),
  ('elseif_blocks -> ELSEIF expression THEN block','elseif_blocks',4,'p_elseif_blocks','lua_yacc_builder.py',62),
  ('elseif_blocks -> elseif_blocks ELSEIF expression THEN block','elseif_blocks',5,'p_elseif_blocks','lua_yacc_builder.py',63),
  ('elseif_blocks -> empty','elseif_blocks',1,'p_elseif_blocks','lua_yacc_builder.py',64),
  ('else_block -> ELSE block','else_block',2,'p_else_block','lua_yacc_builder.py',68),
  ('else_block -> empty','else_block',1,'p_else_block','lua_yacc_builder.py',69),
  ('stat -> FOR IDENTIFIER ASSIGN expression COMMA expression DO block END','stat',9,'p_stat_for','lua_yacc_builder.py',74),
  ('stat -> FOR namelist IN explist DO block END','stat',7,'p_stat_for_in','lua_yacc_builder.py',78),
  ('stat -> FUNCTION funcname funcbody','stat',3,'p_stat_function','lua_yacc_builder.py',84),
  ('stat -> LOCAL FUNCTION IDENTIFIER funcbody','stat',4,'p_stat_local_function','lua_yacc_builder.py',88),
  ('empty -> <empty>','empty',0,'p_empty','lua_yacc_builder.py',92),
  ('retstat -> RETURN explist SEMICOLON','retstat',3,'p_retstat','lua_yacc_builder.py',96),
  ('retstat -> RETURN explist','retstat',2,'p_retstat','lua_yacc_builder.py',97),
  ('retstat -> RETURN SEMICOLON','retstat',2,'p_retstat','lua_yacc_builder.py',98),
  ('retstat -> RETURN','retstat',1,'p_retstat','lua_yacc_builder.py',99),
  ('stat -> DOUBLECOLON IDENTIFIER DOUBLECOLON','stat',3,'p_label','lua_yacc_builder.py',103),
  ('funcname -> IDENTIFIER funcname_tail method_opt','funcname',3,'p_funcname','lua_yacc_builder.py',107),
  ('funcname_tail -> funcname_tail DOT IDENTIFIER','funcname_tail',3,'p_funcname_tail','lua_yacc_builder.py',111),
  ('funcname_tail -> empty','funcname_tail',1,'p_funcname_tail','lua_yacc_builder.py',112),
  ('method_opt -> COLON IDENTIFIER','method_opt',2,'p_method_opt','lua_yacc_builder.py',116),
  ('method_opt -> empty','method_opt',1,'p_method_opt','lua_yacc_builder.py',117),
  ('varlist -> var','varlist',1,'p_varlist','lua_yacc_builder.py',121),
  ('varlist -> varlist COMMA var','varlist',3,'p_varlist','lua_yacc_builder.py',122),
  ('var -> IDENTIFIER','var',1,'p_var','lua_yacc_builder.py',126),
  ('var -> prefixexp LBRACKET expression RBRACKET','var',4,'p_var','lua_yacc_builder.py',127),
  ('var -> prefixexp DOT IDENTIFIER','var',3,'p_var','lua_yacc_builder.py',128),
  ('namelist -> IDENTIFIER','namelist',1,'p_namelist','lua_yacc_builder.py',132),
  ('namelist -> namelist COMMA IDENTIFIER','namelist',3,'p_namelist','lua_yacc_builder.py',133),
  ('explist -> expression','explist',1,'p_explist','lua_yacc_builder.py',137),
  ('explist -> explist COMMA expression','explist',3,'p_explist','lua_yacc_builder.py',138),
  ('prefixexp -> var','prefixexp',1,'p_prefixexp','lua_yacc_builder.py',146),
  ('prefixexp -> functioncall','prefixexp',1,'p_prefixexp','lua_yacc_builder.py',147),
  ('prefixexp -> LPAREN expression RPAREN','prefixexp',3,'p_prefixexp','lua_yacc_builder.py',148),
  ('functioncall -> prefixexp args','functioncall',2,'p_functioncall','lua_yacc_builder.py',152),
  ('functioncall -> prefixexp COLON IDENTIFIER args','functioncall',4,'p_functioncall','lua_yacc_builder.py',153),
  ('args -> LPAREN RPAREN','args',2,'p_args','lua_yacc_builder.py',157),
  ('args -> LPAREN explist RPAREN','args',3,'p_args','lua_yacc_builder.py',158),
  ('args -> STRING','args',1,'p_args','lua_yacc_builder.py',159),
  ('args -> tableconstructor','args',1,'p_args','lua_yacc_builder.py',160),
  ('expression -> FUNCTION funcbody','expression',2,'p_functiondef','lua_yacc_builder.py',164),
  ('funcbody -> LPAREN RPAREN block END','funcbody',4,'p_funcbody','lua_yacc_builder.py',168),
  ('funcbody -> LPAREN parlist RPAREN block END','funcbody',5,'p_funcbody','lua_yacc_builder.py',169),
  ('parlist -> namelist vararg_tail','parlist',2,'p_parlist','lua_yacc_builder.py',173),
  ('parlist -> VARARG','parlist',1,'p_parlist','lua_yacc_builder.py',174),
  ('vararg_tail -> COMMA VARARG','vararg_tail',2,'p_vararg_tail','lua_yacc_builder.py',178),
  ('vararg_tail -> empty','vararg_tail',1,'p_vararg_tail','lua_yacc_builder.py',179),
  ('tableconstructor -> LBRACE RBRACE','tableconstructor',2,'p_tableconstructor','lua_yacc_builder.py',183),
  ('tableconstructor -> LBRACE fieldlist RBRACE','tableconstructor',3,'p_tableconstructor','lua_yacc_builder.py',184),
  ('fieldlist -> field fieldsep_tail','fieldlist',2,'p_fieldlist','lua_yacc_builder.py',188),
  ('fieldsep_tail -> fieldsep fieldfield_tail_opt','fieldsep_tail',2,'p_fieldsep_tail','lua_yacc_builder.py',192),
  ('fieldsep_tail -> empty','fieldsep_tail',1,'p_fieldsep_tail','lua_yacc_builder.py',193),
  ('fieldfield_tail_opt -> fieldlist','fieldfield_tail_opt',1,'p_fieldfield_tail_opt','lua_yacc_builder.py',197),
  ('fieldfield_tail_opt -> empty','fieldfield_tail_opt',1,'p_fieldfield_tail_opt','lua_yacc_builder.py',198),
  ('field -> LBRACKET expression RBRACKET ASSIGN expression','field',5,'p_field','lua_yacc_builder.py',202),
  ('field -> IDENTIFIER ASSIGN expression','field',3,'p_field','lua_yacc_builder.py',203),
  ('field -> expression','field',1,'p_field','lua_yacc_builder.py',204),
  ('fieldsep -> COMMA','fieldsep',1,'p_fieldsep','lua_yacc_builder.py',207),
  ('fieldsep -> SEMICOLON','fieldsep',1,'p_fieldsep','lua_yacc_builder.py',208),
  ('statement -> input','statement',1,'p_start_input','lua_yacc_builder.py',213),
  ('statement -> print','statement',1,'p_start_print','lua_yacc_builder.py',217),
  ('expression -> expression PLUS term','expression',3,'p_binary_operators','lua_yacc_builder.py',221),
  ('expression -> expression MINUS term','expression',3,'p_binary_operators','lua_yacc_builder.py',222),
  ('term -> term TIMES factor','term',3,'p_binary_operators','lua_yacc_builder.py',223),
  ('term -> term DIVIDE factor','term',3,'p_binary_operators','lua_yacc_builder.py',224),
  ('term -> term POWER factor','term',3,'p_binary_operators','lua_yacc_builder.py',225),
  ('expression -> term','expression',1,'p_expression_term','lua_yacc_builder.py',238),
  ('term -> factor','term',1,'p_term_factor','lua_yacc_builder.py',242),
  ('factor -> INTEGER','factor',1,'p_factor_num','lua_yacc_builder.py',246),
  ('factor -> FLOAT','factor',1,'p_factor_float','lua_yacc_builder.py',250),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_expr','lua_yacc_builder.py',254),
  ('print -> PRINT LPAREN expression RPAREN','print',4,'p_print','lua_yacc_builder.py',258),
  ('print -> PRINT LPAREN STRING RPAREN','print',4,'p_print','lua_yacc_builder.py',259),
  ('input -> INPUT LPAREN RPAREN','input',3,'p_input','lua_yacc_builder.py',263),
]
